<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【VS】如何获取应用程序所在路径？</title>
      <link href="/2022/04/04/vs-ru-he-huo-qu-ying-yong-cheng-xu-suo-zai-lu-jing/"/>
      <url>/2022/04/04/vs-ru-he-huo-qu-ying-yong-cheng-xu-suo-zai-lu-jing/</url>
      
        <content type="html"><![CDATA[<p>众所周知程序当前所在目录在我们的编程中有着重要的作用，所以如何获取该变量显得很重要！</p><span id="more"></span><p>下面我说说我的思路，并保持更新！以便使用更优质的办法！</p><h2 id="实现思路">实现思路</h2><hr><h3 id="GetModuleFileName-splitpath-sprintf">GetModuleFileName + _splitpath + sprintf</h3><hr><blockquote><p>假设我的 Demo.exe 现在的路径信息是： C:\Test\Room\Demo.exe</p></blockquote><ol><li><p>首先我们可以使用 <code>GetModuleFileName</code> 函数获取程序的绝对路径！也就是： <code>C:\Test\Room\Demo.exe</code> ！</p></li><li><p>然后使用 <code>_splitpath</code> 函数分割该路径的个个部分，得到该路径的 “驱动器号(<code>C:</code>)”、“目录路径(<code>\Test\Room\</code>)”、“基文件名(<code>Demo</code>)”和“文件扩展名(<code>.exe</code>)”。</p></li><li><p>最后用 <code>sprintf</code> 函数组装出我们需要的信息。</p></li></ol><p>下面讲解一下用到的这三个函数，方便大家在今后的编程中灵活运用它们！</p><h2 id="函数讲解">函数讲解</h2><hr><blockquote><p>详情请参考 Microsoft 的 MSDN 文档</p></blockquote><h3 id="一、GetModuleFileName">一、GetModuleFileName</h3><h4 id="函数声明">函数声明</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">DWORD <span class="token function">GetModuleFileNameA</span><span class="token punctuation">(</span>  <span class="token punctuation">[</span>in<span class="token punctuation">,</span> optional<span class="token punctuation">]</span> HMODULE hModule<span class="token punctuation">,</span>  <span class="token punctuation">[</span>out<span class="token punctuation">]</span>          LPSTR   lpFilename<span class="token punctuation">,</span>  <span class="token punctuation">[</span>in<span class="token punctuation">]</span>           DWORD   nSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>参数 <code>hModule</code></strong></li></ol><p> 正在请求其路径程序的句柄。</p><p> 如果此参数为 <code>NULL</code>，则 <code>GetModuleFileName</code> 将检索当前进程的可执行文件的路径。</p><p> 因为我们需要获取的是当前程序的路径，所以我们需要检索路径的程序就是当前进程对应的可执行文件。所以这一项我们可以填<code>NULL</code>。</p><ol start="2"><li><strong>参数 <code>lpFilename</code></strong></li></ol><p> 指向接收模块的完全限定路径的缓冲区的指针。如果路径的长度小于 <code>nSize</code> 参数指定的大小，则函数将成功，并且路径将作为 <code>NULL</code> 终止的字符串返回。</p><p> 如果路径的长度超过 <code>nSize</code> 参数指定的大小，则函数将成功，并且字符串将被截断为 <code>nSize</code> 字符，包括终止空字符。</p><ol start="3"><li><strong>参数 <code>nSize</code></strong></li></ol><p> <code>lpFilename</code> 缓冲区的大小。</p><h4 id="返回值">返回值</h4><p>如果函数成功，则返回值是复制到缓冲区的字符串的长度（以字符为单位），不包括终止空字符。如果缓冲区太小而无法容纳模块名称，则字符串将被截断为 <code>nSize</code> 字符（包括终止空字符），函数返回 <code>nSize</code>，并且函数将最后一个错误设置为<code>ERROR_INSUFFICIENT_BUFFER</code>。</p><p><strong>Windows XP：</strong> 如果缓冲区太小而无法保存模块名称，则该函数将返回 <code>nSize</code>。最后一个错误代码将保留<code>ERROR_SUCCESS</code>。如果 <code>nSize</code> 为零，则返回值为零，最后一个错误代码<code>ERROR_SUCCESS</code>。</p><p>如果函数失败，则返回值为 0（零）。</p><h4 id="要求">要求</h4><p>记得使用该函数需要头文件 <code>&lt;Windows.h&gt;</code></p><blockquote><p>详情请参考 Microsoft 的 MSDN 文档: <a href="https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulefilenamea">GetModuleFileName</a></p></blockquote><h3 id="二、-splitpath">二、_splitpath</h3><h4 id="函数声明-2">函数声明</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">_splitpath</span><span class="token punctuation">(</span>   <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span>   <span class="token keyword">char</span> <span class="token operator">*</span>drive<span class="token punctuation">,</span>   <span class="token keyword">char</span> <span class="token operator">*</span>dir<span class="token punctuation">,</span>   <span class="token keyword">char</span> <span class="token operator">*</span>fname<span class="token punctuation">,</span>   <span class="token keyword">char</span> <span class="token operator">*</span>ext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>参数 <code>path</code></strong></li></ol><p> 此参数用于向函数传递需要分解的原路径。</p><ol start="2"><li><strong>参数 <code>drive</code></strong></li></ol><p> 接收分割得到的“驱动器号”。</p><ol start="3"><li><strong>参数 <code>dir</code></strong></li></ol><p> 接收分割得到的“目录路径”。</p><ol start="4"><li><strong>参数 <code>fname</code></strong></li></ol><p> 接收分割得到的“基文件名”。</p><ol start="5"><li><strong>参数 <code>ext</code></strong></li></ol><p> 接收分割得到的“文件扩展名”（带符号 ‘.’）。</p><h4 id="返回值-2">返回值</h4><p>该函数没有返回值，通过参数 <code>drive</code>、<code>dir</code>、<code>name</code> 和 <code>ext</code> 返回分解之后的各个部分。</p><h4 id="要求-2">要求</h4><p>记得使用该函数需要头文件 <code>&lt;stdlib.h&gt;</code></p><blockquote><p>详情请参考 Microsoft 的 MSDN 文档: <a href="https://docs.microsoft.com/zh-cn/cpp/c-runtime-library/reference/splitpath-wsplitpath?view=msvc-170">_splitpath</a></p></blockquote><h3 id="三、-sprintf">三、 sprintf</h3><h4 id="函数声明如下：">函数声明如下：</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><strong>参数 <code>str</code></strong></li></ol><p> 这是指向一个字符数组的指针，该数组存储了 C 字符串。</p><ol start="2"><li><strong>参数 <code>format</code></strong></li></ol><p> 这是字符串，包含了要被写入到字符串 <code>str</code> 的文本。它可以包含嵌入的 <code>format</code> 标签，<code>format</code> 标签可被随后的附加参数中指定的值替换，并按需求进行格式化。<code>format</code> 标签属性是 <strong>%[flags][width][.precision][length]specifier</strong>，具体讲解如下：</p><table><thead><tr><th style="text-align:center">specifier（说明符）</th><th style="text-align:left">输出</th></tr></thead><tbody><tr><td style="text-align:center">c</td><td style="text-align:left">字符</td></tr><tr><td style="text-align:center">d 或 i</td><td style="text-align:left">有符号十进制整数</td></tr><tr><td style="text-align:center">e</td><td style="text-align:left">使用 e 字符的科学科学记数法（尾数和指数）</td></tr><tr><td style="text-align:center">E</td><td style="text-align:left">使用 E 字符的科学科学记数法（尾数和指数）</td></tr><tr><td style="text-align:center">f</td><td style="text-align:left">十进制浮点数</td></tr><tr><td style="text-align:center">g</td><td style="text-align:left">自动选择 %e 或 %f 中合适的表示法</td></tr><tr><td style="text-align:center">G</td><td style="text-align:left">自动选择 %E 或 %f 中合适的表示法</td></tr><tr><td style="text-align:center">o</td><td style="text-align:left">有符号八进制</td></tr><tr><td style="text-align:center">s</td><td style="text-align:left">字符的字符串</td></tr><tr><td style="text-align:center">u</td><td style="text-align:left">无符号十进制整数</td></tr><tr><td style="text-align:center">x</td><td style="text-align:left">无符号十六进制整数</td></tr><tr><td style="text-align:center">X</td><td style="text-align:left">无符号十六进制整数（大写字母）</td></tr><tr><td style="text-align:center">p</td><td style="text-align:left">指针地址</td></tr><tr><td style="text-align:center">n</td><td style="text-align:left">无输出</td></tr><tr><td style="text-align:center">%</td><td style="text-align:left">字符</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:center">flags（标识）</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:left">在给定的字段宽度内左对齐，默认是右对齐（参见 width 子说明符）。</td></tr><tr><td style="text-align:center">+</td><td style="text-align:left">强制在结果之前显示加号或减号（+ 或 -），即正数前面会显示 + 号。默认情况下，只有负数前面会显示一个 - 号。</td></tr><tr><td style="text-align:center">(space)</td><td style="text-align:left">如果没有写入任何符号，则在该值前面插入一个空格。</td></tr><tr><td style="text-align:center">#</td><td style="text-align:left">与 o、x 或 X 说明符一起使用时，非零值前面会分别显示 0、0x 或 0X。<br/>与 e、E 和 f 一起使用时，会强制输出包含一个小数点，即使后边没有数字时也会显示小数点。默认情况下，如果后边没有数字时候，不会显示显示小数点。<br/>与 g 或 G 一起使用时，结果与使用 e 或 E 时相同，但是尾部的零不会被移除。</td></tr><tr><td style="text-align:center">0</td><td style="text-align:left">在指定填充 padding 的数字左边放置零（0），而不是空格（参见 width 子说明符）。</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:center">width（宽度）</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">(number)</td><td style="text-align:left">要输出的字符的最小数目。如果输出的值短于该数，结果会用空格填充。如果输出的值长于该数，结果不会被截断。</td></tr><tr><td style="text-align:center">*</td><td style="text-align:left">宽度在 format 字符串中未指定，但是会作为附加整数值参数放置于要被格式化的参数之前。</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:center">.precision（精度）</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">.number</td><td style="text-align:left">对于整数说明符（d、i、o、u、x、X）：precision 指定了要写入的数字的最小位数。如果写入的值短于该数，结果会用前导零来填充。如果写入的值长于该数，结果不会被截断。精度为 0 意味着不写入任何字符。<br/>对于 e、E 和 f 说明符：要在小数点后输出的小数位数。<br/>对于 g 和 G 说明符：要输出的最大有效位数。<br/>对于 s: 要输出的最大字符数。默认情况下，所有字符都会被输出，直到遇到末尾的空字符。<br/>对于 c 类型：没有任何影响。<br/>当未指定任何精度时，默认为 1。如果指定时不带有一个显式值，则假定为 0。</td></tr><tr><td style="text-align:center">.*</td><td style="text-align:left">精度在 format 字符串中未指定，但是会作为附加整数值参数放置于要被格式化的参数之前。</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:center">length（长度）</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">h</td><td style="text-align:left">参数被解释为短整型或无符号短整型（仅适用于整数说明符：i、d、o、u、x 和 X）。</td></tr><tr><td style="text-align:center">l</td><td style="text-align:left">参数被解释为长整型或无符号长整型，适用于整数说明符（i、d、o、u、x 和 X）及说明符 c（表示一个宽字符）和 s（表示宽字符字符串）。</td></tr><tr><td style="text-align:center">L</td><td style="text-align:left">参数被解释为长双精度型（仅适用于浮点数说明符：e、E、f、g 和 G）。</td></tr></tbody></table><ol start="3"><li><strong>附加参数</strong></li></ol><p> 根据不同的 <code>format</code> 字符串，函数可能需要一系列的附加参数，每个参数包含了一个要被插入的值，替换了 <code>format</code> 参数中指定的每个 % 标签。参数的个数应与 % 标签的个数相同。</p><h4 id="返回值-3">返回值</h4><p>如果成功，则返回写入的字符总数，不包括字符串追加在字符串末尾的空字符。如果失败，则返回一个负数。</p><h4 id="要求-3">要求</h4><p>记得使用该函数需要头文件 <code>&lt;stdio.h&gt;</code></p><h2 id="具体实例">具体实例</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">TCHAR proPath_m<span class="token punctuation">[</span>_MAX_PATH<span class="token punctuation">]</span><span class="token punctuation">,</span> Drive_m<span class="token punctuation">[</span>_MAX_DRIVE<span class="token punctuation">]</span><span class="token punctuation">,</span> Dir_m<span class="token punctuation">[</span>_MAX_DIR<span class="token punctuation">]</span><span class="token punctuation">,</span> FName_m<span class="token punctuation">[</span>_MAX_FNAME<span class="token punctuation">]</span><span class="token punctuation">,</span> Ext_m<span class="token punctuation">[</span>_MAX_EXT<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">GetModuleFileName</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LPSTR<span class="token punctuation">)</span>proPath_m<span class="token punctuation">,</span> MAX_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">_splitpath</span><span class="token punctuation">(</span>proPath_m<span class="token punctuation">,</span> Drive_m<span class="token punctuation">,</span> Dir_m<span class="token punctuation">,</span> FName_m<span class="token punctuation">,</span> Ext_m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>workDir<span class="token punctuation">,</span> <span class="token function">__TEXT</span><span class="token punctuation">(</span><span class="token string">"%s%s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Drive_m<span class="token punctuation">,</span> Dir_m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 得到 C:\Test\Room\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="补充">补充</h2><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">值</th></tr></thead><tbody><tr><td style="text-align:center"><code>_MAX_DRIVE</code></td><td style="text-align:center"><code>3</code></td></tr><tr><td style="text-align:center"><code>_MAX_DIR</code></td><td style="text-align:center"><code>256</code></td></tr><tr><td style="text-align:center"><code>_MAX_FNAME</code></td><td style="text-align:center"><code>256</code></td></tr><tr><td style="text-align:center"><code>_MAX_EXT</code></td><td style="text-align:center"><code>256</code></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Visual Studio </tag>
            
            <tag> Win32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置代码高亮 | Hexo-Matery</title>
      <link href="/2022/03/30/she-zhi-dai-ma-gao-liang-hexo-matery/"/>
      <url>/2022/03/30/she-zhi-dai-ma-gao-liang-hexo-matery/</url>
      
        <content type="html"><![CDATA[<p>代码不高亮？别逗！</p><p>不高亮的代码莫得灵魂！</p><span id="more"></span><blockquote><p>这里先说明一下，我使用的是 <code>hexo-theme-matery</code> 和 <code>hexo@6.1.0</code></p></blockquote><h2 id="准备文件">准备文件</h2><hr><h3 id="下载">下载</h3><p><a href="./prism.css">点击下载</a> <code>prism.css</code><br><a href="./prism.js">点击下载</a> <code>prism.js</code></p><p>然后将这两份文件复制到 <code>博客根目录/themes/&#123;主题文件夹&#125;/source/libs/prism/</code> 目录下！</p><h3 id="说明">说明</h3><p>您可能会发现在该目录下会已经存在一个 <code>prism.css</code> 文件，那是主题自带的，也可以使用，您可以按照需自己的需求来！但是<strong>如果使用默认的</strong> <code>prism.css</code> <strong>一定使用配套的</strong> <code>prism.js</code> ！否则会出现问题！如果想使用自定义的 <code>prismJS</code> 高亮规则，可以去官网配置并下载：<a href="">自定义 prismJS 规则</a>！</p><p><strong>补充：</strong><br>我不知道为什么，我的 <code>博客根目录/themes/&#123;主题文件夹&#125;/source/libs/prism/</code> 目录下只有一个 <code>prism.css</code> ，这使得我的博客代码高亮出了很大问题！后来我自己配置一套 <code>prismJS</code> 文件后才解决的问题！</p><p>同时，您需要知道的是：PrismJS 官网下载的 prism 文件在 <code>hexo-theme-matery</code> 主题下显示有些冲突，需要您去修改对应的 CSS 文件。这里我已经修改好了，所以 <code>hexo-theme-matery</code> 主题的朋友，您可以直接使用我提供的下载，它支持几乎所有语言得代码高亮！（其他主题我未做探索）</p><h2 id="配置-prismJS">配置 | prismJS</h2><hr><p>这里我只讲解 <code>prismJS</code> 的配置方法，因为它不会像 <code>Highlight</code> 在 <code>hexo-theme-matery</code> 主题中出现显示问题（个人感觉 Matery 主题更适合使用 <code>prismJS</code> 进行代码高亮）</p><h3 id="修改-config-yml-根目录">修改 _config.yml(根目录)</h3><p>在根目录下的 <code>_config.yml</code> 文件中找到对应代码位置并修改成如下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><div class="caption"><span>_config.yml(根目录)</span></div><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 关闭 highlight</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 启用 prismjs</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Hexo 内建的 PrismJS 支持浏览器端高亮（preprocess 设置为 false）和服务器端高亮（preprocess 设置为 true）两种方式</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否显示行号</span>  <span class="token key atrule">line_threshold</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 接受一个可选的阈值，只要代码块的行数超过这个阈值，就只显示行号。 默认值为 0。</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token comment"># 用代码内的 tab (\t) 替换为给定值，默认值是两个空格。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-config-yml-主题目录">修改 _config.yml(主题目录)</h3><p>在根目录下的 <code>_config.yml</code> 文件中找到对应代码位置并确保 <code>libs.css.prism</code> 和 <code>libs.js.prism</code> 中的路径如下（如果没有就手动添上）：</p><pre class="line-numbers language-yaml" data-language="yaml"><div class="caption"><span>_config.yml(主题目录)</span></div><code class="language-yaml"><span class="token key atrule">libs</span><span class="token punctuation">:</span>  <span class="token key atrule">css</span><span class="token punctuation">:</span>    <span class="token key atrule">prism</span><span class="token punctuation">:</span> /libs/prism/prism.css <span class="token comment"># 标注 prism.css 文件位置</span>      <span class="token key atrule">js</span><span class="token punctuation">:</span>    <span class="token key atrule">prism</span><span class="token punctuation">:</span> /libs/prism/prism.js <span class="token comment"># 标注 prism.js 文件位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是我的配置参数，<strong>仅供参考</strong>：<br><img src="./Snipaste_2022-03-31_10-29-58.jpg" alt="我的配置"></p><h3 id="修改-post-detail-ejs">修改 post-detail.ejs</h3><p>最后打开 <code>博客根目录/themes/&#123;主题文件夹&#125;/layout/_partial/post-detail.ejs</code> 文件，确保（大概在 74 行）有如下代码（如果缺少就补上）：</p><pre class="line-numbers language-ejs" data-language="ejs"><div class="caption"><span>post-detail.ejs</span></div><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>prismjs <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>prismjs<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span><span class="token comment">&lt;!-- 是否加载使用自带的 prismjs. --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>css<span class="token punctuation">.</span>prism<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>js<span class="token punctuation">.</span>prism<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文章-2">参考文章</h2><p><a href="https://hexo.io/zh-cn/docs/syntax-highlight.html#PrismJS">代码高亮|Hexo</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博文 </tag>
            
            <tag> 博客未来 </tag>
            
            <tag> 代码高亮 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客添加 Live2D | Hexo-Matery</title>
      <link href="/2022/03/30/bo-ke-tian-jia-live2d-hexo-matery/"/>
      <url>/2022/03/30/bo-ke-tian-jia-live2d-hexo-matery/</url>
      
        <content type="html"><![CDATA[<p>有谁会拒绝可爱的板娘入驻自己的博客呢？反正我不会吧o(^▽^)o</p><span id="more"></span><p>这几天琢磨了一下，成就感满满，写个随笔记录一下！</p><blockquote><p>我的博客主题模板的是 hexo-theme-martery</p></blockquote><p><img src="./Snipaste_2022-03-30_20-58-57.jpg" alt=""></p><h2 id="安装">安装</h2><hr><h3 id="安装模块：">安装模块：</h3><p><code>npm install --save hexo-helper-live2d</code></p><h3 id="live2d-widget">live2d-widget:</h3><ol><li><p><a href="https://github.com/xiazeyu/live2d-widget.js/releases">下载最新版</a>,解压到博客根目录；</p></li><li><p>自定义模型：</p><ol><li>在博客 <strong>根目录</strong> 中创建一个 <strong>live2d_models</strong> 文件夹；</li><li>给模型创建一个专属文件夹；</li><li>将模型文件复制到此文件夹。</li></ol></li></ol><p><strong>注意！模型的 json 文件路径必须为</strong><code>/live2d_models/&#123;name&#125;/&#123;name&#125;.model.json</code></p><pre class="line-numbers language-fileTree" data-language="fileTree"><div class="caption"><span>模拟文件路径（仅供参考）</span></div><code class="language-fileTree">根目录 | +-----live2d-widget.js-3.0.6 || |+----- ... | +-----live2d_models || |+-----&#123;name&#125; ||| ||       +-----&#123;name&#125;.moc ||| ||+-----&#123;name&#125;.model.json ||| ||+----- ... || |+-----&#123;name-another&#125; ||| ||+----- ... || |+-----&#123;name-another&#125; || |+----- ... |  +-----_config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置">配置</h2><hr><p>向 HEXO 的 <code>_config.yml</code> 文件或 主题(hexo-theme-martery)的 <code>_config.yml</code> 文件中添加如下配置信息：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># live2d 相关配置 - SeaYJ</span><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否开启 live2d</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local <span class="token comment"># 默认</span>  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/ <span class="token comment"># &lt;不需要改动>插件在站点上的根目录(相对路径)</span>  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/ <span class="token comment"># &lt;不需要改动>脚本文件相对与插件根目录路径</span>  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/ <span class="token comment"># &lt;不需要改动>模型文件相对与插件根目录路径</span>  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span>  <span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 调试, 是否在控制台输出日志</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>modelName<span class="token punctuation">&#125;</span> <span class="token comment"># &lt;注意：&#123;modelName&#125; 就是之前那个 &#123;name&#125; 文件夹的名字>模型文件名</span>    <span class="token key atrule">scale</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 模型与canvas的缩放，默认为 1</span>    <span class="token key atrule">hHeadPos</span><span class="token punctuation">:</span> <span class="token number">0.5</span> <span class="token comment"># &lt;似乎没什么用>模型相对于 canvas 的水平位置</span>    <span class="token key atrule">vHeadPos</span><span class="token punctuation">:</span> <span class="token number">0.618</span> <span class="token comment"># &lt;似乎没什么用>模型相对于 canvas 的竖直位置</span>  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">superSample</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># &lt;似乎没什么用>超采样等级,默认为 2</span>    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">150</span> <span class="token comment"># &lt;可以直接理解为你想显示 live2d 为多宽>canvas的长度，默认为 150</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">300</span> <span class="token comment"># &lt;可以直接理解为你想显示 live2d 为多高>canvas的高度，默认为 300</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> left <span class="token comment"># 模型显示位置：right(默认) 或 left</span>    <span class="token key atrule">hOffset</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># &lt;+值代表向上>canvas水平偏移，默认为 0</span>    <span class="token key atrule">vOffset</span><span class="token punctuation">:</span> <span class="token number">16</span> <span class="token comment"># &lt;+值代表向 position 设置的方向>canvas垂直偏移，默认为 -20</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否在手机上显示，默认为 true</span>    <span class="token key atrule">scale</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 手机上的缩放倍数，默认为 0.5</span>  <span class="token key atrule">react</span><span class="token punctuation">:</span>    <span class="token key atrule">opacityDefault</span><span class="token punctuation">:</span> <span class="token number">0.7</span> <span class="token comment"># 模型透明度，默认为 0.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型">模型</h2><hr><h3 id="使用模型">使用模型</h3><p>在 <code>_config.yml</code> 文件的 <code>live2d.model.use</code> 属性中引用模型可以有以下四种方法：</p><p>a. 通过 live2d_models 子目录名称调用</p><p>在前面的<strong>模拟路径</strong>中就是 <code>&#123;name&#125;</code> 或 <code>&#123;name-another&#125;</code> 。</p><p>b. 通过 <strong>相对于根目录的文件夹路径</strong> 调用</p><p>在前面的<strong>模拟路径</strong>中就是 <code>./live2d_models/&#123;name&#125;</code> 或 <code>./live2d_models/&#123;name-another&#125;</code> 。</p><p>c. 使用 npm 现有模型</p><p>通过 <code>npm install 模型名称</code> 来安装 npm 现有模型，然后直接在  <code>live2d.model.use</code> 中直接写 <code>模型名称</code></p><p><strong>可选择的模型有：</strong></p><ul><li>live2d-widget-model-chitose</li><li>live2d-widget-model-epsilon2_1</li><li>live2d-widget-model-gf</li><li>live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</li><li>live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</li><li>live2d-widget-model-haruto</li><li>live2d-widget-model-hibiki</li><li>live2d-widget-model-hijiki</li><li>live2d-widget-model-izumi</li><li>live2d-widget-model-koharu</li><li>live2d-widget-model-miku</li><li>live2d-widget-model-ni-j</li><li>live2d-widget-model-nico</li><li>live2d-widget-model-nietzsche</li><li>live2d-widget-model-nipsilon</li><li>live2d-widget-model-nito</li><li>live2d-widget-model-shizuku</li><li>live2d-widget-model-tororo</li><li>live2d-widget-model-tsumiki</li><li>live2d-widget-model-unitychan</li><li>live2d-widget-model-wanko</li><li>live2d-widget-model-z16</li></ul><p>d. 通过 <strong>网络地址</strong> 引用</p><p>直接填写 <code>&#123;name&#125;.model.json</code> 的网络地址即可！</p><p>例如：<a href="https://unpkg.com/live2dapi@1.0.0/miku/miku.model.json">https://unpkg.com/live2dapi@1.0.0/miku/miku.model.json</a></p><h3 id="发布模型">发布模型</h3><ol><li><p>新建一个目录, 用你的Node环境执行 <code>npm init</code>, 推荐您使用 <code>live2d-widget-model-&#123;name&#125;</code> 的包名；</p></li><li><p>在刚刚创建的目录下创建 <code>assets</code> 子目录, 把你的模型放进去；</p></li><li><p>使用 <code>npm publish</code> 来发布。然后别人就可以使用 <code>npm install --save live2d-widget-model-&#123;name&#125;</code> 来安装，并且通过向 <code>live2d.model.use</code> 键入包名 <code>(live2d-widget-model-&#123;name&#125;)</code> 来使用了.</p></li></ol><h2 id="有趣的-BUG">有趣的 BUG</h2><p>我发现我的这篇博客不知道为什么有时候会出现 Live2D 显示问题，报了个错：<br><img src="./Snipaste_2022-03-31_14-37-02.jpg" alt=""></p><p>我也不明白，希望大佬能教教我！</p><h2 id="参考文章">参考文章</h2><p><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">hexo-helper-live2d</a><br><a href="https://l2dwidget.js.org/docs/index.html">live2d-widget.js</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Live2D </tag>
            
            <tag> 博客未来 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Win32 系统控件都是老式的问题</title>
      <link href="/2022/03/29/jie-jue-win32-xi-tong-kong-jian-du-shi-lao-shi-de-wen-ti/"/>
      <url>/2022/03/29/jie-jue-win32-xi-tong-kong-jian-du-shi-lao-shi-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>在 Win32 编程时我们时常会遇到使用系统窗口类的情况。按理说我们使用的系统窗口类样式应该与我们正在使用的操作系统版本保持一致才是，但为什么往往都是老式的控件呢？</p><span id="more"></span><p>其实解决办法很简单！</p><p>将下列代码加入头文件顶部即可：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_UNICODE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">defined _M_IX86</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>linker<span class="token punctuation">,</span></span><span class="token string">"/manifestdependency:\"type='win32' name='Microsoft.Windows.Common-Controls' version='6.0.0.0' processorArchitecture='x86' publicKeyToken='6595b64144ccf1df' language='*'\""</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">defined _M_X64</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>linker<span class="token punctuation">,</span></span><span class="token string">"/manifestdependency:\"type='win32' name='Microsoft.Windows.Common-Controls' version='6.0.0.0' processorArchitecture='amd64' publicKeyToken='6595b64144ccf1df' language='*'\""</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>linker<span class="token punctuation">,</span></span><span class="token string">"/manifestdependency:\"type='win32' name='Microsoft.Windows.Common-Controls' version='6.0.0.0' processorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*'\""</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 简单来说，你看到的大部分 Win32 窗口方框都是由公共控件库（Common Control Library） Comctl32.dll 实现的窗口。要使应用程序能够显示出与操作系统版本匹配的视觉样式，必须使用<strong>ComCtl32.dll 版本 6.0 或更高版本</strong>；但在没有任何定义的默认情况下，应用程序使用 User32.dll 中定义的用户控件（User Controls）和 <strong>ComCtl32.dll 版本 5.0</strong> 中定义的公共控件（Common Controls）。如果要求指定应用程序使用 <strong>ComCtl32.dll 版本 6.0 或更高</strong>，则必须添加应用程序清单（manifest，如其他答主所述）或编译器指令（#pragma）使得使应用程序能够指定它需要的程序集（Assembly，一组由不同版本 dll 组成的对象列表）版本。</p><p>具体可参考官方文档 <a href="https://docs.microsoft.com/en-us/windows/win32/controls/cookbook-overview">Enabling Visual Styles</a></p><p> <strong>ComCtl32.dll 版本 6.0</strong> 不可再发行（redistributable），也就是说只有当应用程序在对应的 Windows 版本上运行时，这些对应的样式效果可用，也就是说你不能在 Windows 11 上编译程序之后拿到 Windows XP 上运行，要求其用这种方法显示 Windows 11 的效果。关于不同操作系统内置的对应版本：[2]</p><table><thead><tr><th style="text-align:center"><strong>Version</strong></th><th style="text-align:left"><strong>Distribution Platform</strong></th></tr></thead><tbody><tr><td style="text-align:center">5.81</td><td style="text-align:left">Microsoft Internet Explorer 5.01</br>Microsoft Internet Explorer 5.5</br>Microsoft Internet Explorer 6</td></tr><tr><td style="text-align:center">5.82</td><td style="text-align:left">Windows Server 2003</br>Windows Vista</br>Windows Server 2008</br>Windows 7</td></tr><tr><td style="text-align:center">6.0</td><td style="text-align:left">Windows Server 2003</td></tr><tr><td style="text-align:center">6.10</td><td style="text-align:left">Windows Vista</br>Windows Server 2008</br>Windows 7</td></tr></tbody></table><h3 id="声明">声明</h3><p>原文链接：<a href="https://www.zhihu.com/question/489914730">https://www.zhihu.com/question/489914730</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博文 </tag>
            
            <tag> Win32 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>控制台程序运行时不显示 CMD 窗口</title>
      <link href="/2022/03/29/kong-zhi-tai-cheng-xu-yun-xing-shi-bu-xian-shi-cmd-chuang-kou/"/>
      <url>/2022/03/29/kong-zhi-tai-cheng-xu-yun-xing-shi-bu-xian-shi-cmd-chuang-kou/</url>
      
        <content type="html"><![CDATA[<p>我们知道，控制台应用程序本身是没有窗口的。系统为了让我们能看到程序执行的结果，会在程序执行时借一个命令提示符窗口(CMD 窗口)。所以，就有了这个黑黑的窗口…</p><p><img src="./2573290-20220108165410630-278740407.jpg" alt=""></p><p>有时候我们又不想让这个窗口显示出来，那么我们该怎么做呢？</p><p>我总结了以下几种方法：</p><span id="more"></span><h2 id="方法一-2">方法一</h2><hr><p>在头文件的后面加上一行代码：</p><p><code>#pragma comment( linker, &quot;/subsystem:\&quot;windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot; )</code></p><p><strong>原理解释：</strong><br>一、subsystem 和可执行文件的启动<br>LINK 的时候需要指定 /subsystem，这个链接选项告诉 Windows 如何运行可执行文件。<br>我们知道用 VC 编写的程序,运行的时候是需要 C/C++ 运行库支持的。<br>当我们运行一个 C/C++ 程序的时候，链接器会首先寻找应用程序的启动函数,例如:<br>如果你建立了一个 console 程序的话，编译器得链接开关会是以下这种形式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">/</span>subsystem<span class="token operator">:</span><span class="token string">"console"</span> <span class="token operator">/</span>entry<span class="token operator">:</span><span class="token string">"mainCRTStartup"</span> <span class="token punctuation">(</span>ANSI<span class="token punctuation">)</span><span class="token operator">/</span>subsystem<span class="token operator">:</span><span class="token string">"console"</span> <span class="token operator">/</span>entry<span class="token operator">:</span><span class="token string">"wmainCRTStartuup"</span> <span class="token punctuation">(</span>UNICODE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将 subsystem 选成&quot;console&quot;后，Windows在进入可执行文件的代码前（如mainCRTStartup），就会产生一个控制台窗口。之后mainCRTStartup 或 wmainCRTStartuup 会调用main或wmain。<br>如果你建立了一个win32 application,编译器得链接开关则会是一下形式</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">/</span>subsystem<span class="token operator">:</span><span class="token string">"windows"</span> <span class="token operator">/</span>entry<span class="token operator">:</span><span class="token string">"WinMainCRTStartup"</span> <span class="token punctuation">(</span>ANSI<span class="token punctuation">)</span><span class="token operator">/</span>sbusystem<span class="token operator">:</span><span class="token string">"windows"</span> <span class="token operator">/</span>entry<span class="token operator">:</span><span class="token string">"wWinMainCRTStartup"</span> <span class="token punctuation">(</span>UINCODE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将 subsystem 选成&quot;console&quot;后，操作系统就不产生console窗口,该类型应用程序的窗口由用户自己创建。WinMainCRTStartup 或 wWinMainCRTStartup 会调用 WinMain 或 wWinMain。<br>值得一提的是，在进入应用程序的Entry Point前，Windows的装载器已经做过C变量的初始化，有初值的全局变量拥有了它们的初值，没有初值的变量被设为0。</p><h2 id="方法二-2">方法二</h2><hr><p>利用 VBS 脚本启动程序：</p><pre class="line-numbers language-vbs" data-language="vbs"><code class="language-vbs">set objShell&#x3D;wscript.createObject(&quot;wscript.shell&quot;)iReturn&#x3D;objShell.Run(&quot;你的程序.exe&quot;, 0, FALSE) &#39;Run()&#39;第一个参数是你要执行的程序的路径， &#39;第二个参数是窗口的形式，0后台运行；1正常运行；2最小化；3最大化；缺省的话表示正常运行 &#39;第三个参数是表示这个脚本是等待还是继续执行，如果设为了True,脚本就会等待调用的程序退出后再向后执行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法三">方法三</h2><hr><p>通过其他程序来调用需要隐藏窗口的程序（完全隐藏）：<br><code>WinExec(&quot;需要隐藏窗口的程序&quot;,SW_HIDE);    //隐藏执行其他程序</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博文 </tag>
            
            <tag> Win32 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Win32】 UAC用户账户控制 (提权)</title>
      <link href="/2022/03/29/win32-uac-yong-hu-zhang-hu-kong-zhi-ti-quan/"/>
      <url>/2022/03/29/win32-uac-yong-hu-zhang-hu-kong-zhi-ti-quan/</url>
      
        <content type="html"><![CDATA[<p>最近写程序时遇到一个问题，就是当一个程序需要管理员权限才能正常运行该怎么办？</p><p>通过查阅多方资料，我总结出来几个比较实用的办法！<span id="more"></span>(每种办法实现方法不同，同时功能上也有一些小小的差异。)</p><h2 id="方法一-批处理脚本">方法一(批处理脚本)</h2><hr><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch"><span class="token operator">@</span><span class="token command"><span class="token keyword">echo</span> off</span><span class="token command"><span class="token keyword">if</span> <span class="token keyword">exist</span> <span class="token string">"%SystemRoot%\SysWOW64"</span></span> <span class="token command"><span class="token keyword">path</span> <span class="token variable">%path%</span>;<span class="token variable">%windir%</span>\SysNative;<span class="token variable">%SystemRoot%</span>\SysWOW64;<span class="token variable">%~dp0</span></span><span class="token command"><span class="token keyword">bcdedit</span> >nul</span><span class="token command"><span class="token keyword">if</span> '%<span class="token keyword">errorlevel</span>%' <span class="token operator">NEQ</span> '<span class="token number">0</span>'</span> <span class="token punctuation">(</span><span class="token command"><span class="token keyword">goto</span> UACPrompt</span><span class="token punctuation">)</span> <span class="token command"><span class="token keyword">else</span></span> <span class="token punctuation">(</span><span class="token command"><span class="token keyword">goto</span> UACAdmin</span><span class="token punctuation">)</span><span class="token label property">:UACPrompt</span>%1 start "" mshta vbscript:createobject<span class="token punctuation">(</span>"shell.application"<span class="token punctuation">)</span>.shellexecute<span class="token punctuation">(</span>"""%~0""","::",,"runas",1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token command"><span class="token keyword">window</span>.close</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token command"><span class="token keyword">exit</span></span><span class="token command"><span class="token keyword">exit</span> <span class="token parameter attr-name">/B</span></span><span class="token label property">:UACAdmin</span><span class="token command"><span class="token keyword">cd</span> <span class="token parameter attr-name">/d</span> <span class="token string">"%~dp0"</span></span>;你的代码写在这里，你可以在在这里启动你的程序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个批处理脚本代码可以以管理员身份启动，并且会以文件所在位置为工作环境。</p><p>所以，只要用这个脚本启动你的程序即可以管理员身份启动你的程序。</p><p><strong>缺点：</strong></p><ol><li>会有一个命令提示符窗口一闪而过；</li><li>程序启动入口是个批处理文件。</li></ol><h2 id="方法二-manifest">方法二(manifest)</h2><hr><p>在 VS 编辑器里这样设置项目属性后再编译出来的程序就会有个 UAC 盾，以后你的程序只要运行就都会请示管理员权限。</p><p><img src="./2573290-20220108153151471-1065014989.jpg" alt=""></p><p><img src="./2573290-20220108153023432-731459435.jpg" alt=""></p><h2 id="方法三-动态提权">方法三(动态提权)</h2><hr><p>所谓动态提权，就是一个没有管理员权限的程序进程在他认为合适的时候创建一个有管理员权限的程序进程，代码很简单：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">HINSTANCE <span class="token function">ShellExecuteA</span><span class="token punctuation">(</span>  <span class="token punctuation">[</span>in<span class="token punctuation">,</span> optional<span class="token punctuation">]</span> HWND   hwnd<span class="token punctuation">,</span>            <span class="token comment">// 父窗口的句柄，用于显示 UI 或错误消息。如果操作未与窗口关联，则此值可以为NULL。</span>  <span class="token string">"runas"</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>in<span class="token punctuation">]</span>           LPCSTR lpFile<span class="token punctuation">,</span>          <span class="token comment">// 你的程序路径</span>  <span class="token punctuation">[</span>in<span class="token punctuation">,</span> optional<span class="token punctuation">]</span> LPCSTR lpParameters<span class="token punctuation">,</span>    <span class="token comment">// 需要传递的参数</span>  <span class="token punctuation">[</span>in<span class="token punctuation">,</span> optional<span class="token punctuation">]</span> LPCSTR lpDirectory<span class="token punctuation">,</span>     <span class="token comment">// 默认（工作）目录。如果此值为 NULL，则使用当前工作目录。如果在 lpFile 中提供了相对路径，则不要对 lpDirectory 使用相对路径。</span>  <span class="token punctuation">[</span>in<span class="token punctuation">]</span>           INT    nShowCmd         <span class="token comment">// 指定应用程序在打开时如何显示</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 INT nShowCmd 参数具体可参考 <a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow">Microsoft Docs - ShowWindow function</a>，</p><p>具体函数详情参考 <a href="https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecutea">Microsoft Docs - ShellExecuteA function</a>。</p><h2 id="方法四-利用微软-Windows-的漏洞">方法四(利用微软 Windows 的漏洞)</h2><hr><p>这些方法因为不推荐使用，所以不多介绍了。有 Windows UAC 漏洞，但是微软会想办法去修补的，所以这类方法容易失效。</p><h2 id="补充资料">补充资料</h2><hr><blockquote><p>基本概念：</p><p>1。进程的权限是继承的，也就是说，有管理员权限的程序创建的进程也有管理员权限，没有管理员权限的程序创建进程就没有管理员权限（但高权限进程创建进程必须是高权限不是绝对的）</p><p>2。Windows Shell进程explorer本身没有管理员权限，如果explorer有管理员权限，大家可以想一下，那么它创建的进程都有管理员权限，那UAC不就形同虚设了吗</p><p>3。没有权限的进程不能创建有权限的进程！是的，你没有听错，就是不能，这是Windows操作系统规定的。但你可能会问“那么如何提权？你不是说连explorer都没有权限吗？”，答案是：Windows系统中有一个开机自启的AppInfo服务，它直接以系统权限运行，在一个管理员用户登录时，系统会保留一份当前用户的高权限令牌并传给AppInfo服务，提权的过程本身就是一个进程通过进程通信把要提权的程序传给AppInfo服务，AppInfo服务会运行一个UI进程，UI进程会接收用户响应，如果用户同意这次提权，AppInfo服务就使用高权限令牌在当前用户会话的交互窗口站的当前桌面创建管理员权限的进程，创建时将进程的父进程替换为请求提权的进程。这样我们看起来就好像是“没权限进程创建有权限进程”了，其实高权限进程不是它创建的。</p></blockquote><h2 id="参考文档">参考文档</h2><hr><p><a href="https://blog.csdn.net/CSDN_C2/article/details/108408158">让bat批处理以管理员权限运行的实现方法</a><br><a href="https://blog.csdn.net/zuishikonghuan/article/details/46965159">[Win32] UAC用户账户控制（提权+降权）</a><br><a href="https://docs.microsoft.com/zh-cn/">Microsoft 技术文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博文 </tag>
            
            <tag> Win32 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio 设置背景图片主题（所有版本设置方法）</title>
      <link href="/2022/03/29/visual-studio-she-zhi-bei-jing-tu-pian-zhu-ti-suo-you-ban-ben-she-zhi-fang-fa/"/>
      <url>/2022/03/29/visual-studio-she-zhi-bei-jing-tu-pian-zhu-ti-suo-you-ban-ben-she-zhi-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>你知道吗？Visual Studio 编辑器也能设置背景哦~</p><span id="more"></span><p>效果预览：</p><p><img src="./2573290-20211226102206472-1095159371.jpg" alt=""></p><h2 id="目录">目录</h2><hr><ol><li><a href="#step1">扩展安装</a></li><li><a href="#step2">图片背景设置</a></li><li><a href="#step3">主题透明并扩展到 IDE</a></li></ol><h2 id="内容">内容</h2><hr><h3 id="step1">扩展安装</h3><h4 id="ClaudiaIDE-扩展下载">ClaudiaIDE 扩展下载</h4><p>我们打开VS的扩展安装界面：【扩展】-&gt;【管理扩展】-&gt;【联机】，输入 “ClaudiaIDE”，可以看到搜索结果：“ClaudiaIDE”。如果你是 Visual Studio 2022 用户，强烈建议不要用最新版（当前时间为2021.12.26日，我发现这个当前最新版3.0.5有个bug）。你可以进入 ClaudiaIDE 的 GitHub 官网选择旧版，但是只支持 3.0.1+ 版本，所以还是要注意(具体的官网也有说明，记得仔细阅读)。<br><a href="https://github.com/buchizo/ClaudiaIDE/releases">ClaudiaIDE GitHub 历代版本下载传送门</a></p><p><img src="./2573290-20211226093730373-223597750.jpg" alt=""></p><p><img src="./2573290-20211226093427376-1359247982.jpg" alt=""></p><h4 id="主题背景编辑扩展下载">主题背景编辑扩展下载</h4><h5 id="Visual-Studio-2022">Visual Studio 2022</h5><p>我们打开VS的扩展安装界面：【扩展】-&gt;【管理扩展】-&gt;【联机】，输入 “Visual Studio Color Theme Designer 2022”，可以看到搜索结果：“Visual Studio Color Theme Designer 2022”。</p><p><img src="./2573290-20211226093817971-1463883804.jpg" alt=""></p><h5 id="Visual-Studio-2019-及旧版本">Visual Studio 2019 及旧版本</h5><p>我们打开VS的扩展安装界面：【工具】-&gt;【扩展和更新】-&gt;【联机】，输入 “Color Theme Editor for Visual Studio 2019”(2019对于自己的版本号)，可以看到搜索结果：“Color Theme Editor for Visual Studio 2019”。具体其他操作可以参考这篇博客：<a href="https://www.cnblogs.com/stulzq/p/9393323.html">Visual Studio 2017 设置透明背景图</a>。</p><p>因为操作方法略有小差异，我就只以 VS2022 版本为实例进行演示操作，旧版参考其他博客即可。</p><h3 id="step2">图片背景设置</h3><p>我们打开VS：【工具】-&gt;【选项】-&gt;【ClaudiaIDE】。</p><p><img src="./2573290-20211226094940666-684800660.jpg" alt=""></p><p>然后添加自己的图片，按照我这个配置即可：</p><p><img src="./2573290-20211226095114210-1939152974.jpg" alt=""></p><h3 id="step3">主题透明并扩展到 IDE</h3><h3 id="step3-1">操作流程</h3><p>我们重新启动 VS2022 ，然后新建一个项目（中途遇到问题请<a href="#step3-2">点击此处跳转</a>）：</p><p><img src="./2573290-20211226095313186-425493518.jpg" alt=""></p><p><img src="./2573290-20211226095323670-1937743407.jpg" alt=""></p><p><img src="./2573290-20211226095341453-1778583874.jpg" alt=""></p><p><img src="./2573290-20211226095405831-1649223623.jpg" alt=""></p><p><img src="./2573290-20211226095420829-38330897.jpg" alt=""></p><p><img src="./2573290-20211226095442059-1263447836.jpg" alt=""></p><p>根据下面的列表，修改指定控件的指定属性值为 <code>2A252526</code>:<br>(VS2022 有部分是两个属性，只要修改颜色最深的那个就行了！不然会有问题，不信你试试awa)</p><p>TreeView -&gt; Background</p><p>Environment -&gt; Window</p><p>Environment -&gt; EnvironmentBackground</p><p>Environment -&gt; EnvironmentBackgroundGradientBegin<br>Environment -&gt; EnvironmentBackgroundGradientEnd<br>Environment -&gt; EnvironmentBackgroundGradientMiddle1<br>Environment -&gt; EnvironmentBackgroundGradientMiddle2</p><p>Environment -&gt; MainWindowActiveCaption</p><p>Environment -&gt; MainWindowInactiveCaption</p><p>Environment -&gt; CommandShelfBackgroundGradientBegin<br>Environment -&gt; CommandShelfBackgroundGradientEnd<br>Environment -&gt; CommandShelfBackgroundGradientMiddle</p><p>Environment -&gt; CommandShelfHighlightGradientBegin<br>Environment -&gt; CommandShelfHighlightGradientEnd<br>Environment -&gt; CommandShelfHighlightGradientMiddle</p><p>Environment -&gt; CommandBarGradientBegin<br>Environment -&gt; CommandBarGradientEnd<br>Environment -&gt; CommandBarGradientMiddle</p><p>Environment -&gt; CommandBarToolBarBorder</p><p><strong>注意这三个选项，只改颜色最深的那个</strong>：<br><img src="./2573290-20211226095851621-1598812548.jpg" alt=""><br><img src="./2573290-20211226095935682-2046765014.jpg" alt=""><br><img src="./2573290-20211226095957457-1961508691.jpg" alt=""></p><h3 id="step3-2">问题说明</h3><p>遇到这个问题的话可以看下面的操作</p><p><img src="./2573290-20211226100651552-908751673.jpg" alt=""></p><p><strong>操作</strong>：<br>打开 Visual Studio Installer ，然后选择【修改】，勾选对应的【.NET Framework 4.7.2 目标包】，最后【修改】即可。</p><p><img src="./2573290-20211226100913956-983609967.jpg" alt=""></p><p><img src="./2573290-20211226100938372-1036421929.jpg" alt=""></p><p><img src="./2573290-20211226101017490-2084371103.jpg" alt=""></p><p><a href="#step3-1">点我返回【操作流程】</a></p><h4 id="应用">应用</h4><p>修改好了后直接点击【应用】就可以看到透明背景主题了awa…</p><p><img src="./2573290-20211226102041470-451541752.jpg" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博文 </tag>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 如何在当前位置打开 CMD 命令窗口？</title>
      <link href="/2022/03/29/windows-10-ru-he-zai-dang-qian-wei-zhi-da-kai-cmd-ming-ling-chuang-kou/"/>
      <url>/2022/03/29/windows-10-ru-he-zai-dang-qian-wei-zhi-da-kai-cmd-ming-ling-chuang-kou/</url>
      
        <content type="html"><![CDATA[<p>打开 CMD 后还要 CD 配置运行环境？太麻烦了！</p><p>来看看我是怎么在当前位置一键打开 CMD 命令窗口的吧！</p><span id="more"></span><h2 id="方法一">方法一</h2><ol><li>Win + R 键召唤出运行窗口，然后输入 “CMD” 打开命令提示符。</li><li>使用 cd 命令更改当前命令提示符的工作环境。</li></ol><pre class="line-numbers language-Batch" data-language="Batch"><code class="language-Batch">cd&#x2F;              - 退到当前所在盘符cd..             - 返回上一目录cd &quot;FilesPath&quot;   - 进入 FilesPath 目录D:               - 进入 D: 盘（其他盘符类似）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法二">方法二</h2><ol><li>直接在文件资源管理器的某个目录下的地址栏中输入 “cmd”。</li><li>回车，就可以直接打开 cmd 并且在该目录下工作。</li></ol><h2 id="方法三-一劳永逸-注册表">方法三(一劳永逸/注册表)</h2><p>提醒：虽然涉及到注册表，但是操作非常简单。不需要备份。<br>你备份了也没有用，重新导入备份的注册表无法删除你新建的注册表。<br>不过，你要是担心，可以备份一下！</p><ol><li>Win + R 打开运行窗口，输入 “regedit” 打开注册表编辑器。</li><li>打开 “计算机\HKEY_CLASSES_ROOT\Directory\Background\shell\”。</li><li>然后右键新建一个 “项”，名字叫 <code>OpenCMDHere</code> 。</li><li>接着在 OpenCMDHere 项下新建一个项叫 <code>command</code>。</li><li>再接着将 OpenCMDHere 项中的默认值的数据改成 <code>在当前目录启动 CMD</code>（这个名字就是你右键时将看到的名字）。</li><li>最后将 OpenCMDHere 项下的 command 项中的默认值的数据改成 <code>cmd.exe /s /k pushd &quot;%V&quot;</code>。</li></ol><p>重新启动一下 Windows资源管理器 或者 重新启动一下电脑 就行了。<br>以后，你就会发现你的右键菜单多了一项 在当前目录启动 CMD 。<br>点击该项即可在右键位置目录打开 命令提示符 了，就和打开 Powershell 一样，可谓一劳永逸。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博文 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VC 2010 Express 学生版(中文版)</title>
      <link href="/2022/03/29/vc-2010-express-xue-sheng-ban-zhong-wen-ban/"/>
      <url>/2022/03/29/vc-2010-express-xue-sheng-ban-zhong-wen-ban/</url>
      
        <content type="html"><![CDATA[<p>Microsoft Visual C++ 2010 Express 虽然微软已经不再提供下载，但是很多时候教学还是要用…</p><span id="more"></span><p>无语…找了半天终于找到了中文版的。这里挂个链接，分享给大家！<br>希望能帮到大家！</p><h2 id="Microsoft-Visual-C-2010-Express-学生版">Microsoft Visual C++ 2010 Express 学生版</h2><p><a href="https://pan.baidu.com/s/1q9rfbN-114zaDBPxZUeqUQ">下载传送门(提取码:r7sm)</a></p><h2 id="如何安装">如何安装</h2><ol><li><p>拿到压缩文件后，解压到桌面(别怕，安装完后这个文件夹是可以删除的)。</p></li><li><p>在 <strong>“.\vc2010express\VCExpress2010\”</strong> 文件夹中找到 <strong>steup.exe</strong> 文件。然后右键，选择 <strong>“打开”</strong> 。</p></li><li><p>配置好安装路径后(想配置安装路径就自己配置，不会的或者不想的就默认就行了^-^)一路下一步就好了。</p></li><li><p>(*)可能有人安装后桌面找不到桌面图标，从而不知道怎么打开 VC 2010 。别急，方法我放在图里了，大家自己看就行了！</p></li></ol><p><img src="./2573290-20211023221044090-485750094.jpg" alt=""></p><p><img src="./2573290-20211023221149424-1971937898.jpg" alt=""></p><p><img src="./2573290-20211023221316953-1394538470.jpg" alt=""></p><p><img src="./2573290-20211023221506887-1825171777.jpg" alt=""></p><p><img src="./2573290-20211023221632636-1958762448.jpg" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑重装系统后要做的那些事</title>
      <link href="/2022/03/29/dian-nao-chong-zhuang-xi-tong-hou-yao-zuo-de-na-xie-shi/"/>
      <url>/2022/03/29/dian-nao-chong-zhuang-xi-tong-hou-yao-zuo-de-na-xie-shi/</url>
      
        <content type="html"><![CDATA[<p>花了点时间整理了一下重装系统后要做的事。</p><p>这些都是按照我个人喜好设置的，大家可以自行选取操作！</p><span id="more"></span><h2 id="大纲">大纲</h2><ol><li><a href="#step1">系统相关</a><ul><li><a href="#step1-1">更改桌面图标</a></li><li><a href="#step1-2">更改新内容存储的位置</a></li><li><a href="#step1-3">更改“视频”、“图片”、“文档”等的保存位置</a></li></ul></li><li><a href="#step2">软件相关</a><ul><li><a href="#step2-1">安全软件</a></li><li><a href="#step2-2">浏览器</a></li><li><a href="#step2-3">解压软件</a></li><li><a href="#step2-4">Office系列办公软件</a></li><li><a href="#step2-5">Notepad++</a></li></ul></li><li><a href="#step3">优化相关</a><ul><li><a href="#step3-1">电脑鼠标指针</a></li><li><a href="#step3-2">电脑壁纸</a></li></ul></li></ol><h2 id="简略操作解释">简略操作解释</h2><h3 id="step1">系统相关</h3><h4 id="step1-1">1. 更改桌面图标</h4><p><img src="./2573290-20211020064929758-546120728.jpg" alt=""></p><p><img src="./2573290-20211020065011223-2063110694.jpg" alt=""></p><p><img src="./2573290-20211020065045358-430429568.jpg" alt=""></p><h4 id="step1-2">2. 更改新内容存储的位置</h4><p><img src="./2573290-20211020065211274-1200984641.jpg" alt=""></p><p><img src="./2573290-20211020065249931-1359983939.jpg" alt=""></p><p><img src="./2573290-20211020065357887-1413384634.jpg" alt=""></p><h4 id="step1-3">3. 更改“视频”、“图片”、“文档”等的保存位置</h4><p><img src="./2573290-20211020065841756-302612061.jpg" alt=""></p><p><img src="./2573290-20211020070223294-1497201277.jpg" alt=""></p><p><strong>注释：这里我是根据 “2. 更改新内容存储的位置” 里的操作进行选择位置的！</strong></p><p><strong>例如</strong>：我在 “2. 更改新内容存储的位置” 操作中，将视频默认更改到了<strong>D盘</strong>。</p><p>那么在路径 <strong>“D:\电脑用户名\”</strong> 中就会有一个默认的 “Videos” 文件夹(其中文名为“视频”)！</p><p><strong>将新位置定在这里会更加有条理一些！</strong></p><p><img src="./2573290-20211020070404784-1708735807.jpg" alt=""></p><h3 id="step2">软件相关</h3><p>注意：我这里使用的软件都是我自己喜欢的！</p><p>大家也可以按照自己的意愿自行替换相应的软件！</p><h4 id="step2-1">1. 安全软件</h4><p><img src="./2573290-20211020175910587-244774172.jpg" alt=""></p><p>安全软件我一直以来用的就是 “<strong><a href="https://www.huorong.cn/">火绒</a></strong>” ，这里是描述我的配置方案。</p><p>至于为什么选 <a href="https://www.huorong.cn/">火绒</a> 我就不做过多的赘述了！</p><p>大家可以自行百度 <a href="https://www.huorong.cn/">火绒</a> 作为安全软件的优缺点！</p><h4 id="step2-2">2. 浏览器</h4><p><img src="./2573290-20211020180046902-2006605773.jpg" alt=""></p><p>之前我的浏览器一直是标配的 “<a href="https://www.google.cn/chrome/index.html">Chrome</a>” ，但由于 <a href="https://www.google.cn/chrome/index.html">Chrome</a> 隶属于 Google 公司，导致有些功能在国内很难使用！</p><p>外加上 Microsoft 推出**<a href="https://www.microsoft.com/zh-cn/edge#platform">最新版EDGE</a><strong>后，我就果断选择了</strong><a href="https://www.microsoft.com/zh-cn/edge#platform">最新版EDGE</a>**。</p><p>大家可以自行了解相关信息，我不做过多赘述！</p><h4 id="step2-3">3. 解压软件</h4><p><img src="./2573290-20211020180120639-1409023001.jpg" alt=""></p><p><a href="https://pan.baidu.com/s/1aEB59J4OGgfujATOa5aJng">WinRAR</a> (提取码:a5rw)虽然有广告，但是我已经做好破解版了！</p><p>大家可以按照操作说明进行操作，使用我的破解版 <a href="https://pan.baidu.com/s/1aEB59J4OGgfujATOa5aJng">WinRAR</a> 。</p><h4 id="step2-4">4. Office系列办公软件</h4><p><img src="./2573290-20211020180217427-1890024410.jpg" alt=""></p><p>我使用的是 <a href="https://otp.landian.vip/zh-cn/">Office_Tool_Pro</a> 来配置我需要的 Office！</p><p>软件官网和程序内部均有详细说明，我这里也不过多介绍了！</p><h4 id="step2-5">5. Notepad++</h4><p>一个小巧实用的编辑软件还是很有必要的，特别是针对我这种经常需要在各大编程语言的来回变换的苦逼孩子TOT~</p><p>所以，我选择了 <a href="https://pan.baidu.com/s/1z17dS3biGv5fk_LdL_f2dg/">Notepad++</a> (提取码:mxd3) !</p><p>有兴趣的可以自己去了解 <a href="https://pan.baidu.com/s/1z17dS3biGv5fk_LdL_f2dg/">Notepad++</a> 的强大之处！</p><h3 id="step3">优化相关</h3><h4 id="step3-1">电脑鼠标指针</h4><p>这个我一直用的是 <a href="https://pan.baidu.com/s/16rTA9aIEKm5I6YtS7n6NrQ">Helltaker Stroke Version</a> (提取码:davh)!</p><p><img src="./2573290-20211020175737852-883422927.jpg" alt=""></p><p>声明：这个鼠标指针原作者不是我！</p><p>我只是把鼠标指针的安装模块和对应指针的名称进行了修改，使得其看起来更专业一些！</p><p>强迫症~<br>哈哈哈哈~<br>见谅~</p><h4 id="step3-2">电脑壁纸</h4><p>电脑壁纸也是电脑美观的一大亮点！</p><p>当然，找壁纸大家都是有能力的！我就不献丑了~</p><p>嘻嘻(●’◡’●)~</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博文 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝剑锋从磨砺出，梅花香自苦寒来</title>
      <link href="/2022/03/28/bao-jian-feng-cong-mo-li-chu-mei-hua-xiang-zi-ku-han-lai/"/>
      <url>/2022/03/28/bao-jian-feng-cong-mo-li-chu-mei-hua-xiang-zi-ku-han-lai/</url>
      
        <content type="html"><![CDATA[<p>此刻的我坐在电脑前，格外兴奋！因为我终于有一个自己的博客了！</p><span id="more"></span><p>之前一直依靠博客园写博客，但是问题很多也很麻烦。虽然说总体还不错，但是毕竟是商业的博客网站，还是有很多限制的。后来，<a href="https://www.cnblogs.com/SeaYJ/">我的博客园博客</a>中 JS 代码突然由于某种原因不能正常加载了。这样一来，更加坚定了我搭建一个自己的博客的欲望。</p><p>终于，在前辈们的帮助下我终于搭建了这个博客！非常感谢大家对我的帮助，也感谢 <a href="https://hexo.io/">HEXO</a> 提供的帮助！</p><p>谢谢！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博文 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
