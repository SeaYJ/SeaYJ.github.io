<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo[Matery] 添加黑夜模式</title>
      <link href="/2022/07/19/hexo-matery-tian-jia-hei-ye-mo-shi/"/>
      <url>/2022/07/19/hexo-matery-tian-jia-hei-ye-mo-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo-Matery </tag>
            
            <tag> 黑夜模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo[Matery] Valine评论系统优化</title>
      <link href="/2022/07/18/hexo-matery-valine-ping-lun-xi-tong-you-hua/"/>
      <url>/2022/07/18/hexo-matery-valine-ping-lun-xi-tong-you-hua/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇文章内容主要依据<a href="https://github.com/DesertsP/">DesertP</a>的 <strong>Valine-Admin</strong> 项目和微软的 <a href="https://outlook.live.com/">Outlook 邮箱</a>展开。</p></blockquote><p>众所周知，Matery 主题自带的 Valine 评论系统是非常好用的，但是因为 Valine 的轻量特点，导致 Valine 的邮箱提醒功能显得很鸡肋。<br>甚至到 Valine 1.4.0+ 版本后，直接放弃了这一功能，详情可在<a href="https://valine.js.org/notify.html">官方文档</a>里看到说明。</p><blockquote><p>个人觉得，waline 虽然很优秀，但是对一般人来说很不友好。谁会为了给你个评论专门去注册一个自己不用的账户？</p></blockquote><p>但是， DesertP 大佬开发的 Valine-Admin 及时的弥补了这一缺点。下面来介绍 Valine-Admin 的部署。</p><h2 id="一、部署-Valine">一、部署 Valine</h2><p>要想使用 Valine-Admin，当然得确保 Valine 的部署是可用的啊！这一点本篇文章不做过多的介绍！大家可以去网上找教程部署 Valine。</p><p>但是这里还是要说一下，推荐你使用较新版（<strong>版本为 1.4.0+ 的</strong>）的 <code>Valine.min.js</code>。</p><ol><li>在 Matery 主题的 <code>_config.yml</code> 文件中，找到如下代码并像我一样配置（大概在 500 多行位置）：</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">libs</span><span class="token punctuation">:</span>  <span class="token key atrule">js</span><span class="token punctuation">:</span>    <span class="token key atrule">valine</span><span class="token punctuation">:</span> /libs/valine/Valine.min.js <span class="token comment"># 若想保持最新版，请替换为 https://unpkg.com/valine/dist/Valine.min.js  默认为 /libs/valine/Valine.min.js</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>然后来到 <code>.\themes\hexo-theme-matery\source\libs\valine\</code> 文件夹，把 <code>Valine.min.js</code> 手动替换成 <a href="https://unpkg.com/valine@1.5.0/dist/Valine.min.js">1.5.0 版本</a>。</p></li><li><p>最后把主题目录下的 <code>_config.yml</code> 文件里的 Valine 配置信息中的 <strong>notify</strong> 和 <strong>verify</strong> 设置成 <code>false</code>。</p></li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-19_14-37-59.jpg" alt=""></p><p>那么 Valine 的准备工作基本做完了！</p><h2 id="二、注册-Valine-的管理员邮箱">二、注册 Valine 的管理员邮箱</h2><p>是的，你没有听错。这里确实<strong>需要重新注册一个邮箱，专门用于管理 Valine 评论</strong>。</p><p>如果不注册的话，后面会有个很难受的BUG（后面会细说）。</p><p>所以，专门注册一个邮箱用于管理 Valine 评论的发件很有必要。而且<strong>建议这个邮箱的密码不要有任何规则</strong>（你一般用不到，他就是默认的发件邮箱，相当于别人评论后会通过这个邮箱发送过来），直接键盘乱敲，然后记录下来来提高安全性（这非常重要）。</p><p>至于为什么 Outlook 会这么复杂，后面再说。</p><p><strong>-&gt;</strong> <a href="https://signup.live.com/">注册 Outlook 邮箱</a> <strong>&lt;-</strong></p><p>记录下 <strong>邮箱地址(后面用</strong> <code>xxx@outlook.com</code> <strong>指代)</strong> 和 <strong>登陆密码</strong>，后面会用到。</p><h2 id="三、部署-Valine-Admin">三、部署 Valine-Admin</h2><ol><li><p>进入 <a href="https://console.leancloud.cn/">LeanCloud 官网</a>，然后登录，打开之前配置 Valine 创建的应用。</p></li><li><p>依次点击<code>云引擎</code>-&gt;<code>部署</code>-&gt;<code>项目部署</code>-&gt;<code>Git部署</code>-&gt;<code>配置Git</code>, 然后 Git 的地址填写： <a href="https://github.com/DesertsP/Valine-Admin.git/">https://github.com/DesertsP/Valine-Admin.git/</a> ，接着再次点击<code>Git部署</code>-&gt;<code>部署即可</code>（<strong>部署分支为 master</strong>）。</p></li><li><p>设置环境变量，具体可参考下面的表格(表格只列出了部分，因为我是使用 Outlook 邮箱配置的，所以列出的内容针对 Outlook 邮箱的配置。具体可参考<a href="https://deserts.io/valine-admin-document/">官网手册</a>)：</p></li></ol><table><thead><tr><th style="text-align:left">变量名</th><th style="text-align:left">说明</th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:left"><strong>SITE_NAME</strong></td><td style="text-align:left"><strong>[必填]</strong> 网站名称</td><td style="text-align:left">SeaYJ’s Blog</td></tr><tr><td style="text-align:left"><strong>SITE_URL</strong></td><td style="text-align:left"><strong>[必填]</strong> 网站地址，最后不要加<code>/</code></td><td style="text-align:left"><a href="https://seayj.cn">https://seayj.cn</a></td></tr><tr><td style="text-align:left"><strong>SMTP_USER</strong></td><td style="text-align:left"><strong>[必填]</strong> SMTP 服务用户名，一般为邮箱地址</td><td style="text-align:left"><a href="mailto:xxx@outlook.com">xxx@outlook.com</a></td></tr><tr><td style="text-align:left"><strong>SMTP_PASS</strong></td><td style="text-align:left"><strong>[必填]</strong> SMTP 密码，一般为授权码，而不是邮箱的登陆密码，请自行查询对应邮件服务商的获取方式</td><td style="text-align:left"><a href="mailto:xxx@outlook.com">xxx@outlook.com</a> 的登陆密码</td></tr><tr><td style="text-align:left"><strong>SMTP_SERVICE</strong></td><td style="text-align:left"><strong>[新版支持]</strong> 邮件服务提供商,<a href="https://nodemailer.com/smtp/well-known/#supported-services">查看所有支持</a></td><td style="text-align:left">Outlook365</td></tr><tr><td style="text-align:left"><strong>SMTP_HOST</strong></td><td style="text-align:left"><strong>[选填]</strong> <code>SMTP_SERVICE</code> 留空时，自定义 SMTP 服务器地址</td><td style="text-align:left"><a href="http://smtp-mail.outlook.com">smtp-mail.outlook.com</a></td></tr><tr><td style="text-align:left"><strong>SMTP_PORT</strong></td><td style="text-align:left"><strong>[选填]</strong> <code>SMTP_SERVICE</code> 留空时，自定义 SMTP 端口</td><td style="text-align:left">587</td></tr><tr><td style="text-align:left"><strong>SMTP_SECURE</strong></td><td style="text-align:left"><strong>[选填]</strong> 使用 TLS</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left"><strong>SENDER_NAME</strong></td><td style="text-align:left"><strong>[必填]</strong> 发件人名称</td><td style="text-align:left">Valine评论管理系统</td></tr><tr><td style="text-align:left"><strong>SENDER_EMAIL</strong></td><td style="text-align:left"><strong>[必填]</strong> 发件人邮箱</td><td style="text-align:left"><a href="mailto:xxx@outlook.com">xxx@outlook.com</a></td></tr><tr><td style="text-align:left"><strong>BLOGGER_EMAIL</strong></td><td style="text-align:left"><strong>[建议]</strong> 博主通知收件邮箱，默认使用 <code>SENDER_EMAIL</code></td><td style="text-align:left"><a href="mailto:yyy@outlook.com">yyy@outlook.com</a></td></tr><tr><td style="text-align:left"><strong>TEMPLATE_NAME</strong></td><td style="text-align:left"><strong>[选填]</strong> 设置提醒邮件的主题</td><td style="text-align:left">custom2</td></tr><tr><td style="text-align:left"><strong>AKISMET_KEY</strong></td><td style="text-align:left"><strong>[选填]</strong> Akismet Key 用于垃圾评论检测，设为 <code>MANUAL_REVIEW</code> 开启人工审核，留空不使用反垃圾</td><td style="text-align:left">xxxxxx</td></tr><tr><td style="text-align:left"><strong>ADMIN_URL</strong></td><td style="text-align:left"><strong>[建议]</strong> Web 主机二级域名（云引擎域名），用于自动唤醒</td><td style="text-align:left"><a href="https://xxx.leanapp.cn/">https://xxx.leanapp.cn/</a></td></tr></tbody></table><p>大家可以参考我的配置（如下图）和上面的表格，然后要填写具体信息。</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-19_15-40-13.jpg" alt=""></p><p><strong>补充：</strong><br>1&gt; 这里要解释一下, <code>yyy@outlook.com</code> 邮箱就是你要用来接收评论的邮箱;<br>2&gt; 微软的 SMTP 设置可以参考<a href="https://support.microsoft.com/zh-cn/office/outlook-com-%E7%9A%84-pop-imap-%E5%92%8C-smtp-%E8%AE%BE%E7%BD%AE-d088b986-291d-42b8-9564-9c414e2aa040">官方的说明</a>;<br>3&gt; Akismet Key 可以在 <strong>Akismet 官网</strong><a href="https://akismet.com/development/">免费申请一个</a>。</p><p>最好图片列举的都要填写。</p><ol start="4"><li>设置完环境变量再次部署即可让其生效。</li></ol><p>到此为止， Valine-Admin 已经部署完毕，目前体验还不错。</p><h2 id="四、设置定时任务">四、设置定时任务</h2><p>在 <code>云引擎</code>&gt;<code>定时任务</code> 里添加如下两个定时任务即可：</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-19_23-22-49.jpg" alt=""><br><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-19_23-24-32.jpg" alt=""></p><p><strong>至此，你的  Valine-Admin 评论系统基本可以正常运作了。</strong></p><h2 id="五、一些问题补充">五、一些问题补充</h2><h4 id="-3"></h4><h4 id="1-同时收到两份邮件">1. 同时收到两份邮件</h4><h5 id="原因-1：">原因 1：</h5><p>Leancloud 的密码重置邮件提醒，如果你曾经配置过 valine 自带的邮件提醒（1.4.0+ 不会出现该问题，因为该功能已被官方废弃），会出现两个邮件提醒。<br>将 Valine 自带的邮件回复提醒关掉即可 <code>notify: false</code> :</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">valine</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">appId</span><span class="token punctuation">:</span> leancloud application app id  <span class="token key atrule">appKey</span><span class="token punctuation">:</span> leancloud application app key  <span class="token key atrule">notify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># valine mail notify (true/false) </span>  <span class="token key atrule">verify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># valine verify code (true/false)</span>  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># comment list page size</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="原因-2：">原因 2：</h5><p>博主回复收到两条邮件提醒，因为你为设置 <code>BLOGGER_EMAIL</code> 或设置为了自己的发件邮箱。<br>环境变量中配置 <code>BLOGGER_EMAIL</code> 为其他邮箱即可</p><pre class="line-numbers language-none"><code class="language-none">BLOGGER_EMAIL  yyy@outlook.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参考文献">参考文献</h2><ol><li><a href="https://xiabor.com/valine-admin.html">Valine Admin 邮件回复提醒</a>;</li><li><a href="https://deserts.io/valine-admin-document/">Valine Admin 配置手册 - Deserts</a>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo-Matery </tag>
            
            <tag> Valine </tag>
            
            <tag> Valine-Admin </tag>
            
            <tag> LeanCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo[Matery] 访问加速</title>
      <link href="/2022/07/15/hexo-matery-fang-wen-jia-su/"/>
      <url>/2022/07/15/hexo-matery-fang-wen-jia-su/</url>
      
        <content type="html"><![CDATA[<p>这两个星期天天熬夜到一两点，去学习怎么提高博客的访问速度。最终小有成果，下面我总结一下这几十天的研究内容。</p><h2 id="一、全站加速（按照推荐等级排列）">一、全站加速（按照推荐等级排列）</h2><hr><h4 id="-5"></h4><h4 id="1）CDN-加速">1）CDN 加速</h4><p>这个需要备案，如果没备案的话建议看后面的方法。</p><h4 id="2）Vercel-加速">2）Vercel 加速</h4><p>【2022.7.16】 我目前备案还没下来，所以暂时用的这个办法。目前体验感觉还不错，都说我的博客访问速度提高了不少。</p><p>下面来详细说一下这个内容。</p><ol><li><p><strong>注册账号：</strong> 首先进入 <a href="https://vercel.com">Vercel 官网</a>，直接用 Github 登录(Github Page 用户)。</p></li><li><p><strong>导入项目：</strong> 点击 <code>New Project</code> 按钮新建项目，然后导入你的 GitHub 博客项目（<a href="http://xxx.github.io">xxx.github.io</a> 那个）。有可能他会自动识别，自己可以按照实际情况自己来，只要把那个项目导入就行。详情见下图。</p></li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-15_14-37-50.jpg" alt="导入项目"></p><ol start="3"><li><strong>部署网站：</strong> 在这个就有一个，记得选择 <code>Other</code> 模板即可，其他的都默认。最后在部署卡片上面你就可以看到 Vercel 生成的 URL ，那就是 Vercel 加速后的网址。</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-15_14-41-48.jpg" alt=""></p><ol start="4"><li><strong>修改DNS：</strong> 如果你有自己的域名，需要在域名服务提供商（阿里云、GoDaddy 等）的 DNS 解析中增加一条 CNAME 记录（将你的域名指向另一个域名）。就是把原来解析到 <a href="http://xxx.github.io">xxx.github.io</a> 的规则改成 Vercel 提供的域名就行（第 3 步里生成的 URL 选一个即可，记得把原来 <a href="http://xxx.github.io">xxx.github.io</a> 的解析规则的删了）。</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-16_14-59-24.jpg" alt=""></p><ol start="5"><li><strong>在 Vercel 里自定义域名：</strong> 最后，在 Vercel 项目中添加你的域名即可。</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-16_15-06-40.jpg" alt=""></p><p>然后，过一会儿在访问自己的博客，嘿嘿~<br>速度快到起飞~(ノω&lt;。)ノ))☆.。</p><h4 id="3）gitee、gitlub、coding-等">3）gitee、gitlub、coding 等</h4><h5 id="①-gitee">① gitee</h5><p>本来我就想使用 gitee 进行代码托管，但是 gitee pages 的域名是不能自定义的。要想域名自定义，需要开通 gitee pages pro ，但是作为个人用户是无法在现在开用的。这个在 <a href="https://gitee.com/help/articles/4228">gitee pages pro 的官方文档</a>里也有说明。</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-16_14-39-32.jpg" alt=""></p><p>不过有大佬提出了解决方案：方向代理。</p><p>可惜的是，这个办法需要域名备案…额…都域名备案了，为什么不直接使用国内的 CDN 加速呢？所以，我果断放弃了 gitee pages 的方案。</p><h5 id="②-coding">② coding</h5><p>然后我就想到了大家都使用的 coding ，但是我的 coding 账号不知道出了什么问题，绑定了一个不存在的腾讯云账号，还解绑不了（真有 TX 一贯的尿性，气炸了）！</p><p>所以，coding 我也不打算使用。这类文章网上也有很多，大家可以看别的人博客，借用 coding + hexo 来建设国内的博客（适合国内访问）。</p><h5 id="③-gitlub-等">③ gitlub 等</h5><p>这类代码托管仓库我没怎么用过，大家自己研究一下吧，原理都一样。找个访问快点的代码托管，开启 Page 功能就行。</p><h2 id="二、细节加速">二、细节加速</h2><hr>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo-Matery </tag>
            
            <tag> 访问加速 </tag>
            
            <tag> GitHub Page </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo[Matery] 添加自定义404页面</title>
      <link href="/2022/07/12/hexo-matery-tian-jia-zi-ding-yi-404-ye-mian/"/>
      <url>/2022/07/12/hexo-matery-tian-jia-zi-ding-yi-404-ye-mian/</url>
      
        <content type="html"><![CDATA[<p>虽然 <strong>Hexo-Matery</strong> 主题自带有一个 404 页面，但是不得不说这个页面真的不是很好看，而且在渲染的时候使用的和主题是几乎一模一样的样式，显得很单调而且没有新意。所以，自己研究了一下怎么添加一个自定义的 404 页面。</p><h2 id="一、编写-404-页面">一、编写 404 页面</h2><p>因为是自定义的 404 页面，大家可以发挥自己的创造力或者借鉴大佬的作品（我就不重复造轮子了，我挑了个自己喜欢的模板，嘿嘿~）。</p><ol><li><p>首先，在<strong>根目录</strong>的 <code>source</code> 文件夹下新建一个 <code>404.html</code> 文件（当然你也可以 <code>hexo new page 404</code> ，但是本篇将不会针对此操作进行讲解，可以自行研究 <em><strong>&lt;因为那样无法本地预览&gt;</strong></em> ）。</p></li><li><p>然后把准备好的代码复制进刚刚新建的 <code>404.html</code> 文件，保存即可。</p></li></ol><p>后面会给大家几个比较好看的 404 页面，大家可以直接拿去用哦~<br><strong>详情请见补充！</strong></p><h2 id="二、排除-404-页面的渲染">二、排除 404 页面的渲染</h2><p>排除 404 页面的渲染有两种方法：</p><h4 id="-4"></h4><h4 id="1）全局配置">1）全局配置</h4><p>这个比较适合排除大量文件的渲染，一般用于文件较多的时候。但是啊，我是一个有一丢丢强迫症的孩子啊，所我果断选择把所有的需要排除渲染的文件都在全局配置里声明，哪怕目前只有一个这样的文件。</p><ol><li><p>打开<strong>根目录</strong>下的 <code>_config.yml</code> 文件，找到 <code>skip_render:</code> 配置项（大概在30行左右）。</p></li><li><p>然后加上 <code>[404.html]</code> 即可（可使用正则表达式）。</p></li></ol><h5 id="注意">注意</h5><p>Hexo 会渲染所有在 <code>source</code> 文件夹里的文件，在<strong>根目录</strong>下的 <code>_config.yml</code> 文件里的 <code>skip_render</code> 配置项可指定跳过渲染的文件。并且，该配置项支持正则表达式。详情见以下代码。</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>  demo/*<span class="token punctuation">,</span>     <span class="token comment"># 不渲染 demo 文件夹下所有文件（不包括子文件夹中的文件）</span>  demo/<span class="token important">**</span><span class="token punctuation">,</span>    <span class="token comment"># 不渲染 demo 文件夹下所有文件及子文件夹中文件</span>  demo/<span class="token important">*.html</span> <span class="token comment"># 不渲染 demo 文件夹下所有 html 文件</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>还有一点也非常重要</strong>：如果你选择用全局配置来忽略某些文件的渲染的话，请务必在本地预览前执行 <code>hexo cl &amp;&amp; hexo g</code> 重新生成静态文件，以保证你的修改生效。</p><h4 id="2）单页面配置">2）单页面配置</h4><ol><li><p>打开编写好的 <code>404.html</code> 文件。</p></li><li><p>在顶行添加代码 <code>layout: false</code> 即可：</p> <pre class="line-numbers language-html" data-language="html"><code class="language-html">layout: false---<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="三、部署-2">三、部署</h2><p>最后，一键三连即可（<code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</code>）。</p><p>前面提过，如果是新建 <code>404.html</code> 文件的话，是可以进行本地预览的。但是这个预览不能使用 <code>http://localhost:4000/任意字符</code> 来查看，必须使用 <code>http://localhost:4000/404</code> 来进行本地预览。</p><h2 id="四、404-页面模板">四、404 页面模板</h2><p><a href="https://pan.baidu.com/s/1dgWnx5zUNTp3sRUL_7NcCw?pwd=gt1h">百度网盘(提取码: gt1h)</a></p><p>预览如下：</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-13_00-13-54.jpg" alt=""><br><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-13_00-14-54.jpg" alt=""><br><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-13_00-15-20.jpg" alt=""><br><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-13_00-15-39.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo-Matery </tag>
            
            <tag> 404 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo[Matery] 添加自定义 Loading 页面</title>
      <link href="/2022/07/05/hexo-matery-tian-jia-zi-ding-yi-loading-ye-mian/"/>
      <url>/2022/07/05/hexo-matery-tian-jia-zi-ding-yi-loading-ye-mian/</url>
      
        <content type="html"><![CDATA[<p>想法来自 Vino 大佬的博客，我觉得使用一个 Loading 页面来缓解博客渲染速度慢带来的尴尬是件酷酷的事情。自己捣鼓了一下如何把任何一个页面改成 Hexo 博客下的 Loading 页面，发现其实还是比较简单的。</p><p>下面我来说一下我魔改的具体步骤。</p><h2 id="一、制作-Loading-页面">一、制作 Loading 页面</h2><ol><li>首先我们需要准备一个已经写好的 Loading 动画页面。<br>（这种动画页面网上有很多大佬提供了开源项目，咋就不重复造轮子了，嘿嘿~）</li></ol><blockquote><p>我这里以大佬 <strong>YanH</strong> 写的 <a href="https://gitee.com/wyanhui02/html_css_demo/tree/master/code/118">Loading 动画页面</a>为例。</p></blockquote><p>其页面具体代码如下：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1,maximum-scale&#x3D;1,user-scalable&#x3D;no&quot;&gt;    &lt;title&gt;带LOGO的全屏加载动画&lt;&#x2F;title&gt;    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;118.css&quot;&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div class&#x3D;&quot;loader-wrapper&quot;&gt;        &lt;div class&#x3D;&quot;loader&quot;&gt;&lt;img src&#x3D;&quot;&#x2F;images&#x2F;1.png&quot; alt&#x3D;&quot;&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;loader-text&quot;&gt;            &lt;!-- 10个div --&gt;            &lt;div&gt;L&lt;&#x2F;div&gt;            &lt;div&gt;O&lt;&#x2F;div&gt;            &lt;div&gt;A&lt;&#x2F;div&gt;            &lt;div&gt;D&lt;&#x2F;div&gt;            &lt;div&gt;I&lt;&#x2F;div&gt;            &lt;div&gt;N&lt;&#x2F;div&gt;            &lt;div&gt;G&lt;&#x2F;div&gt;            &lt;div&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;&#x2F;div&gt;            &lt;div&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">*&#123;    &#x2F;* 初始化 *&#x2F;    margin: 0;    padding: 0;&#125;body&#123;    &#x2F;* 100%窗口高度 *&#x2F;    height: 100vh;&#125;.loader-wrapper&#123;    &#x2F;* 固定定位 *&#x2F;    position: fixed;    left: 0;    top: 0;    z-index: 1;    width: 100%;    height: 100%;    &#x2F;* 溢出隐藏 *&#x2F;    overflow: hidden;    &#x2F;* 渐变背景 *&#x2F;    background: linear-gradient(45deg,rgb(90,54,148) 0%,rgb(19,189,206) 33%,rgb(0,148,217) 66%,rgb(111,199,181) 100%);    background-size: 400%;    background-position: 0% 100%;    &#x2F;* 执行背景渐变动画：动画名 时长 加速后减速 无限次播放 *&#x2F;    animation: gradient 7.5s ease-in-out infinite;&#125;&#x2F;* 旋转loading的外圈 *&#x2F;.loader&#123;    width: 150px;    height: 150px;    border: 3px solid transparent;    border-top-color: #fff;    &#x2F;* 相对定位 居中 *&#x2F;    position: relative;    left: 50%;    top: 50%;    margin-left: -75px;    margin-top: -75px;    z-index: 2;    border-radius: 50%;    display: flex;    justify-content: center;    align-items: center;    &#x2F;* 执行旋转动画 *&#x2F;    animation: spin 1.7s linear infinite;&#125;&#x2F;* 旋转loading的中圈 *&#x2F;.loader::before&#123;    content: &quot;&quot;;    &#x2F;* 绝对定位 *&#x2F;    position: absolute;    top: 5px;    left: 5px;    bottom: 5px;    right: 5px;    border-radius: 50%;    border: 3px solid transparent;    border-top-color: #fff;    &#x2F;* 执行反向的旋转动画 reverse:反向 *&#x2F;    animation: spin 0.6s linear infinite reverse;&#125;&#x2F;* 旋转loading的内圈 *&#x2F;.loader::after&#123;    content: &quot;&quot;;    &#x2F;* 绝对定位 *&#x2F;    position: absolute;    top: 15px;    left: 15px;    bottom: 15px;    right: 15px;    border-radius: 50%;    border: 3px solid transparent;    border-top-color: #fff;    &#x2F;* 执行旋转动画 *&#x2F;    animation: spin 1s linear infinite;&#125;&#x2F;* logo *&#x2F;.loader img&#123;    width: 55%;    height: 55%;    border-radius: 50%;    &#x2F;* 执行反向的旋转动画,时长必须和外圈的动画一致(不让其跟着旋转) *&#x2F;    animation: spin 1.7s linear infinite reverse;&#125;.loader-text&#123;    width: 50%;    height: 36px;    &#x2F;* 绝对定位 水平居中 *&#x2F;    position: absolute;    top: 72%;    left: 50%;    transform: translateX(-50%);    z-index: 3;    &#x2F;* 防止选取 *&#x2F;    user-select: none;&#125;.loader-text div&#123;    width: 30px;    height: 36px;    color: #fff;    font-size: 32px;    margin: 0 20px;    &#x2F;* 绝对定位 *&#x2F;    position: absolute;    &#x2F;* 默认隐藏+旋转180度 *&#x2F;    opacity: 0;    transform: rotate(180deg);    &#x2F;* 执行文字移动动画 *&#x2F;    animation: move 2s linear infinite;&#125;&#x2F;* 最后面的三个圆 *&#x2F;.loader-text div:nth-child(8)::before,.loader-text div:nth-child(9)::before,.loader-text div:nth-child(10)::before&#123;    content: &quot;&quot;;    width: 10px;    height: 10px;    border-radius: 50%;    background-color: #fff;    position: absolute;    left: 0;    bottom: 0;&#125;&#x2F;* 文字下的投影 *&#x2F;.loader-text div::after&#123;    content: &quot;&quot;;    width: 10px;    height: 5px;    border-radius: 50%;    background-color: rgba(255,255,255,0.15);    position: absolute;    bottom: -40px;    left: 50%;    margin-left: -5px;&#125;&#x2F;* 最后面的三个圆的投影 *&#x2F;.loader-text div:nth-child(8)::after,.loader-text div:nth-child(9)::after,.loader-text div:nth-child(10)::after&#123;    left: 0;    margin-left: 0;&#125;&#x2F;* 接下来为各个文字设置动画延迟时间 *&#x2F;.loader-text div:nth-child(2)&#123;    animation-delay: 0.2s;&#125;.loader-text div:nth-child(3)&#123;    animation-delay: 0.4s;&#125;.loader-text div:nth-child(4)&#123;    animation-delay: 0.6s;&#125;.loader-text div:nth-child(5)&#123;    animation-delay: 0.8s;&#125;.loader-text div:nth-child(6)&#123;    animation-delay: 1s;&#125;.loader-text div:nth-child(7)&#123;    animation-delay: 1.2s;&#125;.loader-text div:nth-child(8)&#123;    animation-delay: 1.4s;&#125;.loader-text div:nth-child(9)&#123;    animation-delay: 1.6s;&#125;.loader-text div:nth-child(10)&#123;    animation-delay: 1.8s;&#125;&#x2F;* 定义动画 *&#x2F;&#x2F;* 背景渐变动画 *&#x2F;@keyframes gradient &#123;    50%&#123;        background-position: 100% 0%;    &#125;&#125;&#x2F;* 旋转动画 *&#x2F;@keyframes spin &#123;    0%&#123;        transform: rotate(0);    &#125;    100%&#123;        transform: rotate(360deg);    &#125;&#125;&#x2F;* 文字移动动画 *&#x2F;@keyframes move &#123;    0%&#123;        right: 0;        opacity: 0;    &#125;    35%&#123;        right: 41%;        opacity: 1;        transform: rotate(0);    &#125;    65%&#123;        right: 59%;        opacity: 1;        transform: rotate(0);    &#125;    100%&#123;        right: 100%;        transform: rotate(-180deg);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>适配手机样式。一定要注意手机样式是否显示正常，如果不正常可以通过如下代码进行重新调整。</li></ol><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&#x2F;*小屏幕下(手机类)的样式*&#x2F;@media only screen and (max-width: 601px) &#123;    &#x2F;* 你的代码 *&#x2F;&#125;&#x2F;*中等屏幕下(平板类)的样式*&#x2F;@media only screen and (min-width: 600px) and (max-width: 992px) &#123;    &#x2F;* 你的代码 *&#x2F;&#125;&#x2F;*大屏幕下(桌面类)的样式*&#x2F;@media only screen and (min-width: 993px) &#123;    &#x2F;* 你的代码 *&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>最后注意调整 Loading 页面层级，使其在所有页面的最上面。</li></ol><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">.loader-wrapper &#123;&#x2F;* 注意选择器要改成你的 Loading 页面 *&#x2F;    z-index: 10000&#x2F;* 填写适合你自己博客的数字，确保 Loading 页面在所有页面最上面 *&#x2F;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二、引入自己的博客">二、引入自己的博客</h2><p>修改好了 Loading 动画页面后就可以引入自己的博客中了。</p><ol><li>首先，在主题文件夹中的 <code>\layout\_widget\</code> 文件夹里创建一个 <code>loading.ejs</code> 文件。</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-06_14-38-32.jpg" alt=""></p><ol start="2"><li>用编辑器打开该文件，写入以下代码。</li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>preloader<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loader-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    /* 你的 HTML 代码将放在这里 */    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> <span class="token function-variable function">endLoading</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token string">'auto'</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'loader-box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span>endLoading<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>打开准备的 Loading 动画 HTML 文件，将 <em><strong>&lt;body&gt;</strong></em> 标签下的所有内容复制到<strong>第 2 步</strong>注释标注的位置。</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-06_23-48-55.jpg" alt=""></p><ol start="4"><li>在主题目录下的 <code>source</code> 文件夹里找到 <code>css</code> 文件夹，新建一个 <code>loading.css</code> 文件，并将前面修改好的 CSS 文件内容复制进去、保存。</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-06_23-54-44.jpg" alt=""></p><ol start="5"><li>然后打开主题目录下的 <code>_config.yml</code> 文件，添加如下代码，增加一个控制 Loading 页面的开关。</li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 是否开启页面加载动画preloader:  enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>接着在主题目录下的 <code>_config.yml</code> 找到 <code>libs</code> 的配置项，在 <code>css</code> 子项里添加自己的 loading.css 文件位置信息。参考代码如下。</li></ol><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">libs:  css:    loadingPage: &#x2F;css&#x2F;loading.css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="7"><li>紧接着我们就可以在页面中引用相关文件了。<ul><li>打开 <code>layout\_partial\head.ejs</code> 文件，在 <em><strong>&lt;head&gt;</strong></em> 标签里添加代码：</li></ul> <pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token comment">&lt;!--自定义添加的 Loading Page CSS 样式--></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>preloader<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>css<span class="token punctuation">.</span>loadingPage </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最后我们打开 <code>layout\layout.ejs</code> 文件，在 <em><strong>&lt;body&gt;</strong></em> 标签下添加代码：</li></ul> <pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token comment">&lt;!--自定义的 Loading Page--></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>preloader<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/loading'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="三、部署">三、部署</h2><p><code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</code> 一键三连即可。具体一些细节需要根据自己的需求自己修改解决，这里只提供一个自定义 Loading 页面的大体思路，希望大家能自己思考，做出自己风格的独特 Blog，嘿嘿(●ˇ∀ˇ●)~</p><p>溜了~</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo-Matery </tag>
            
            <tag> Loading Page </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 hexo[Matery] 不算子统计失效问题</title>
      <link href="/2022/07/03/jie-jue-hexo-matery-bu-suan-zi-tong-ji-shi-xiao-wen-ti/"/>
      <url>/2022/07/03/jie-jue-hexo-matery-bu-suan-zi-tong-ji-shi-xiao-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>最近在搞博客，结果突然发现 hexo-matery 主题提供的 busuanzi 统计失效了。具体表现为要么统计的数据异常大，不是真实访问数据，或者就是网页页底的统计信息展示无法显示，或者显示不正常。就下面图片展示的一样。</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-03_22-27-14.jpg" alt=""><br><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-03_22-29-27.jpg" alt=""><br><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-03_22-31-42.jpg" alt=""></p><p>后来我通过<a href="">不算子的官网</a>混进了不算子官Q群（<em>゜ー゜</em>），在群里大佬给出了关于“为什么 busuanzi 统计时访问数据太大不真实？”的答案(额，感觉自己有点没脑纸…)。</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-03_22-35-50.jpg" alt=""></p><p>这个简单的问题解决后，部署到服务器后结果发现这个不算子统计还是无法正常显示，有时候网卡的时候居然还能显示一下，网速比较好的时候几乎看不到。</p><p>这就勾起了我的好奇心，既然有那么一瞬间能显示出来，证明它应该是存在的啊！会不会只是被隐藏起来了？</p><p>打开 EDGE 使用 F12 大法，我仔细核对了一下，发现不知道为什么不算子统计信息显示的相关标签总是被 dispaly-none …</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-03_22-51-44.jpg" alt=""></p><p>后来，我在官方群里也找到了相关的说明。官方给出的解释是，部分 live2D 设置会与之冲突。但是具体的解决办法并没有明确指出(文档里网页提供的方法我试了，没有)…需要我们自行查找、修正。</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-03_23-00-51.jpg" alt=""></p><p>最后，经过不懈努力，我终于找到了解决办法：</p><ol><li><p>我们先找到 hexo-matery 主题的 busuanzi 配置 JS 文件(位置:<code>\themes\hexo-theme-matery\source\libs\others\</code>)。</p></li><li><p>用编辑器打开，然后搜索 <code>none</code> 字样，找到 “b.style.display=“none”” 的位置。</p></li><li><p><strong>删除 “b.style.display=“none”” 中的 “none” 字样即可</strong>。</p></li></ol><p>具体可参考下图：</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-07-03_23-35-23.jpg" alt=""></p><h5 id="补充-3">补充</h5><p>如果是其他主题没有对应的 JS 本地文件（以链接的形式引用的），那就把文件下载到本地，然后引用按照上述操作修改后的 JS 本地文件即可。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo-Matery </tag>
            
            <tag> busuanzi </tag>
            
            <tag> live2D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode For Python</title>
      <link href="/2022/06/30/vscode-for-python/"/>
      <url>/2022/06/30/vscode-for-python/</url>
      
        <content type="html"><![CDATA[<p>最近打算用 VSCode 集成我电脑上的众多编辑器，毕竟谁不想拥有一个万能的 IDE 呢？</p><p><strong>强调:</strong> 本篇只注重对 Python 的配置，对于其他不相关内容不做赘述。</p><h2 id="一、安装-VSCode-2">一、安装 VSCode</h2><p>这里默许大家已经装好 VSCode 了。要是还没有装的话可以去 <a href="https://code.visualstudio.com/">VSCode 官网</a>下载合适版本的 VSCode 。</p><blockquote><p>我的 VSCode 版本为 Windows x64 1.68.1</p></blockquote><h2 id="二、安装-Python-开发环境">二、安装 Python 开发环境</h2><h4 id=""></h4><h4 id="①-安装-Python">① 安装 Python</h4><p>大家可以去 <a href="https://www.python.org/downloads/">Python 下载官网</a>下载自己需要的 Python 版本。唯一要注意的是，在安装过程中<strong>一定要勾选 <code>Add Python to Path</code> 项</strong>，否则安装完成后还需要我们手动配置环境变量。</p><p>具体过程可以参考此图：</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="v2-ecd62d681c929429e8e0b95c2cf6afdc_b.gif" alt="本图源于知乎——浪普"></p><h4 id="②-检查-Python-安装情况">② 检查 Python 安装情况</h4><p>打开 CMD 命令提示符，输入 <code>python -V</code> （注意：这个 V 是大写的 V），能显示版本序列号即为安装成功。详情请见下图。</p><p>如果发生了错误或者不显示，则可能是安装时未勾选 <code>Add Python to Path</code> 项，需要手动配置环境变量。</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-30_14-08-44.jpg" alt=""></p><h4 id="③-安装-Python-第三方包">③ 安装 Python 第三方包</h4><p>这里需要下载两个 Python 的第三方包，他们分别是 <strong>flake8</strong> 和 <strong>yapf</strong> 。</p><ul><li><strong>flake8</strong> 会检查编写代码时的不规范的地方和语法错误。</li><li><strong>yapf</strong> 是一个代码格式化工具，可以一键美化代码。</li></ul><h5 id="安装步骤如下：">安装步骤如下：</h5><ol><li><p>打开 CMD 输入 <code>pip list</code> 检查是否已经安装有这两个包；</p></li><li><p>如果没有，则输入命令 <code>pip install flake8</code> 下载安装 <strong>flake8</strong> 或输入 <code>pip install yapf</code> 下载安装 <strong>yapf</strong> ；</p></li><li><p>下载完成后再次输入 <code>pip list</code> 检查是否成功安装这两个包。</p></li></ol><p>安装成功可参考下图。</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-30_14-44-37.jpg" alt=""></p><h5 id="补充">补充</h5><p>Ⅰ）中途有的小伙伴可能会遇到下图显示的情况。</p><p>别担心，这只是 pip 提醒你有新版本的 pip 可以用，要你更新一下而已。你可以使用 <code>python.exe -m pip install --upgrade pip</code> 命令来更新 pip 。</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-30_14-45-45.jpg" alt=""></p><p>Ⅱ）还有可能遇到下图显示的情况。</p><p>别担心，这个只是因为网速原因引起的。可以反复执行命令，直至成功为止。<br>（玄学技巧：<strong>用电脑连接手机热点</strong>(。・ω・。)）</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./QQ%E6%88%AA%E5%9B%BE20220630144926.png" alt=""></p><h2 id="三、安装-Python-插件">三、安装 Python 插件</h2><h4 id="-2"></h4><h4 id="①-安装插件">① 安装插件</h4><ol><li><p>打开 VScode ，按下快捷键 <code>Ctrl</code>+<code>Shift</code>+<code>X</code> ，进入插件管理页面。</p></li><li><p>在搜索栏输入 python 。</p></li><li><p>选择插件，点击安装。</p></li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-30_15-03-16.jpg" alt=""></p><h4 id="②-配置插件">② 配置插件</h4><ol><li><p>打开 VSCode 设置界面，打开用户配置的 settings.json 文件。</p></li><li><p>参考下图添加如下代码（注意 json 的语法规范）：</p></li></ol><pre class="line-numbers language-Json" data-language="Json"><code class="language-Json">&quot;python.linting.flake8Enabled&quot;: true,&quot;python.formatting.provider&quot;: &quot;yapf&quot;,&quot;python.linting.flake8Args&quot;: [&quot;--max-line-length&#x3D;248&quot;],&quot;python.linting.pylintEnabled&quot;: false ,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-30_15-24-12.jpg" alt=""></p><h4 id="③-检查测试">③ 检查测试</h4><ol><li><p>新建一个 <strong>xxx.py</strong> 文件，然后用 VSCode 打开。</p></li><li><p>代码输入 <code>print(&quot;Hello VSCode For Python!\n&quot;)</code> 。</p></li><li><p>然后按下 <code>F5</code> 或者在右上角找到编译运行按钮，编译运行该文件。能正常输出 “Hello VSCode For Python” 字样即表示配置成功。</p></li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-30_15-36-30.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode For Java</title>
      <link href="/2022/06/29/vscode-for-java/"/>
      <url>/2022/06/29/vscode-for-java/</url>
      
        <content type="html"><![CDATA[<p>最近要重新学习 Java 了，所以又下载回了 IDEA 编辑器。但是，感觉 IDEA 对天朝程序员很不友好，体验感真的很差（可能是我已经习惯了使用 Visual Studio 的原因吧）！外加上我现在的编辑器是真的多，每一个还都有自己的作用，短时间内还不知道会不会再用到，这就导致了光编辑器就有 6 个之多。所以，这次打算用编辑器之神—— VSCode 做一个大整合，这样就会清爽很多啦~</p><p><strong>着重强调:</strong> 本篇将只注重 VSCode 对 Java 的配置，请优先去<a href="https://code.visualstudio.com/">官网</a>下载合适版本的 VSCode ，本文不做过多介绍（博主用的 VSCode 版本为 <strong>Windows_x64_1.68.1</strong>）。</p><h2 id="一、安装-VSCode">一、安装 VSCode</h2><p>大家提前下载好，这里不赘述了。</p><p><a href="https://code.visualstudio.com/">VScode 官网</a></p><h2 id="二、安装-JAVA-SE11">二、安装 JAVA SE11+</h2><p>VSCode 类似于 Notepad++ ，虽然其效率远大于 Notepad++，但是其环境搭建还是需要我们用户配合插件自行搭建。所以，第一步需要安装 Java SE。</p><p><strong>强调:</strong> 这里必须说明一下，Java SE只能选用 Java SE11 或者更高版本的 Java SE，至于原因，后面会解释。</p><p>下面是具体的安装步骤：</p><ol><li><a href="https://profile.oracle.com/myprofile/account/create-account.jspx">注册 Oracle 账号</a>。这个是必须的，不然 Oracle 不让你下载他的东西(注册的信息可以随便填，只要账号邮箱和密码记得就行，不一定要填真实信息)。</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./20220629200302.png" alt=""></p><ol start="2"><li><a href="https://www.oracle.com/cn/java/technologies/javase/jdk11-archive-downloads.html">下载 Java SE11</a>。这里我选用 jdk-11.0.14_windows-x64_bin.zip 做演示，jdk-11.0.14_windows-x64_bin.exe 安装方法类似。你也可以按照自己的喜好来安装你自己的 Java SE。</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-29_20-06-26.jpg" alt=""></p><ol start="3"><li>将下载好的 jdk-11.0.14_windows-x64_bin.zip 文件解压到你需要保存该 JDK 文件的位置。我这里解压到了 <code>E:\MySoftware\Java Development Kits\</code> 文件夹下。</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-29_20-21-13.jpg" alt=""></p><ol start="4"><li>右键<code>此电脑</code>，选择<code>属性</code>，然后选择<code>关于</code>中的<code>高级系统设置</code>，打开<code>环境变量</code>设置界面。</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-29_20-25-55.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-29_20-28-19.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-29_20-30-29.jpg" alt=""></p><ol start="5"><li>在<code>用户变量</code>中新建如下变量：</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-29_20-31-43.jpg" alt=""></p><ol start="6"><li>接着在<code>用户变量</code>中选择 Path 变量，增加两个值并确定：<ul><li><code>%JAVA_HOME11%\bin\</code></li><li><code>%JAVA_HOME11%\jre\bin\</code></li></ul></li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-29_20-33-45.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-29_20-35-37.jpg" alt=""></p><ol start="7"><li>配置完环境变量后就可以确定了。但是，细心的小伙伴可能会发现此时在 <code>%JAVA_HOME11%</code> 指引的目录下并没有对应的 jre 文件夹。这是怎么回事？是下载的时候文件丢失了吗？不！这个 jre 文件夹是要我们自己生成的。<br/><br/>首先，打开 CMD 窗口，进入 JDK 安装根目录；<br/><br/>然后，执行以下命令生成 jre 文件夹。<br/><code>bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre</code></li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-29_20-45-03.jpg" alt=""></p><ol start="8"><li>最后，我们输入 <code>java -version</code> 检查一下即可。出现下图内容即表示 Java SE11 安装成功。</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-29_20-50-00.jpg" alt=""></p><h2 id="三、安装-Extension-Pack-for-Java-插件">三、安装 Extension Pack for Java 插件</h2><ol><li>打开 VSCode 页面，打开插件安装页面，安装 <code>Extension Pack for Java</code> 即可。<br/>（这里解释一下为什么前面要求只能安装 Java SE11+ ，因为这个插件只支持 Java SE11+ 。对于低版本的 Java SE ，可能会报“很抱歉，激活面向 Java 的 IntelliCode 支持时遇到问题。有关详细信息，请查看“针对 Java 的语言支持”和 “VS IntelliCode” 输出窗口。”的错误！）</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-29_20-56-30.jpg" alt=""></p><ol start="2"><li>配置 VSCode 中的 Java.home：<ul><li>快捷键 <code>Ctrl</code> + <code>,</code> 打开 VSCode 设置界面；</li><li>在“搜索设置”中输入 javahome 进行搜索；</li><li>在 Java:Home 项选择“在settings.json中编辑”；</li><li>在 <code>java.jdt.ls.java.home</code> 键对应的值里填上你的 JDK 根目录绝对路径。</li></ul></li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-29_21-13-45.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-29_19-31-46.jpg" alt=""></p><h2 id="四、检查">四、检查</h2><p>到这里 VSCode For Java 基本搭建完毕，最后只需要新建一个项目检查一下是否可以正常运行即可！</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-29_19-35-41.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 安装及汉化教程[2022]</title>
      <link href="/2022/06/27/idea-an-zhuang-ji-han-hua-jiao-cheng-2022/"/>
      <url>/2022/06/27/idea-an-zhuang-ji-han-hua-jiao-cheng-2022/</url>
      
        <content type="html"><![CDATA[<p>最近要搞 JAVA ，又下回了那个熟悉的编辑器 IDEA ，正好乘此机会写个教程简单分享一下！</p><h2 id="官网下载-IDEA">官网下载 IDEA</h2><p>首先去 <a href="https://www.jetbrains.com/idea/">IDEA 官网</a>下载安装包，这里以免费的社区版为例。</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./DK@5JN@P7O%7DWG%5DPMPG7$ZIG.png" alt=""><br><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-27_19-25-41.jpg" alt=""></p><h2 id="安装-IDEA">安装 IDEA</h2><ol><li>鼠标右键双击安装引导可执行程序；</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-27_19-27-26.jpg" alt=""></p><ol start="2"><li>点击 <code>Next</code> 进入安装引导；</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-27_19-33-18.jpg" alt=""></p><ol start="3"><li><strong>定义安装位置</strong>；</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-27_19-35-29.jpg" alt=""></p><ol start="4"><li>勾选一些必要的<strong>安装选项</strong>，可以按照我的勾选进行勾选（个人喜欢这么安装）；</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-27_19-38-41.jpg" alt=""></p><ol start="5"><li>选择开始菜单文件夹（可以自定义，也<strong>可以默认</strong>&lt;图片中的是我自定义的哈&gt;）</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-27_19-39-36.jpg" alt=""></p><ol start="6"><li>接下来<strong>等待</strong>安装完成就可以了；</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-27_19-40-23.jpg" alt=""></p><ol start="7"><li>最后是完成安装，可以选择立即重启，也可以<strong>以后再重启</strong>（你总有关电脑的时候吧awa），影响都不大。</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-27_19-43-08.jpg" alt=""></p><h2 id="IDEA-汉化">IDEA 汉化</h2><p>之后，桌面会多一个图标，<strong>双击运行</strong>它：</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-27_19-43-45.jpg" alt=""></p><p>之后你会看到英文界面的 IDEA ，这对英语水平不是特别出色的小伙伴可能不是特别的友好。但是也不用怕，官方有对应的汉化，只不过和一般的程序不同，IDEA 的汉化是<strong>以插件的形式提供</strong>的。</p><p>下面演示一下怎么安装官方的汉化插件。</p><ol><li>按照图片<strong>安装官方的汉化插件</strong>；</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-27_19-50-06.jpg" alt=""></p><ol start="2"><li>安装好了后 IDEA 编辑器会提示你<strong>重启编辑器</strong>。根据提示重启一下就好了！</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-27_19-54-57.jpg" alt=""></p><ol start="3"><li>重启后就是汉化后的 IDEA 编辑器了，自己新建一个项目就行了。</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-27_19-55-45.jpg" alt=""></p><h3 id="汉化补充">汉化补充</h3><p>有的小伙伴可能还没安装汉化插件就稀里糊涂的新建了项目（虽然没什么影响），然后找不到插件安装入口了。也不用急，具体方法在这里。</p><ol><li>依次点击 <code>File</code> -&gt; <code>Settings</code>，也可以快捷键 <code>CTRL + ALT + S</code>；</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-27_19-59-38.jpg" alt=""></p><ol start="2"><li>然后和上面说的一样，安装汉化插件再<strong>重启编辑器</strong>就行了；</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-27_20-00-32.jpg" alt=""></p><ol start="3"><li>重启完成后界面就是汉化的了，官方的汉化基本够用。</li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-27_20-01-16.jpg" alt=""></p><h2 id="小优化">小优化</h2><p>最后的最后，大家可以修改编辑器字体（可以不改）。</p><p>这里个人推荐 <code>Consolas</code> 字体，至于字体大小，自己看着改一下就行！</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-06-27_20-02-45.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMD 选择菜单(键盘事件监听 + 字符颜色控制)</title>
      <link href="/2022/05/16/cmd-xuan-ze-cai-dan-jian-pan-shi-jian-jian-ting/"/>
      <url>/2022/05/16/cmd-xuan-ze-cai-dan-jian-pan-shi-jian-jian-ting/</url>
      
        <content type="html"><![CDATA[<p>  控制台程序编程中，如果主菜单总是需要输入数字选择，那显得很不直观，不像正常主菜单方向键可以上下移动选择按钮，所以这一次写代码的时候就直接改善此问题！</p><h2 id="效果预览">效果预览</h2><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-05-16_14-40-18.jpg" alt="帮同学写的结课作业"></p><h2 id="原理详释">原理详释</h2><h4 id="一、控制台窗口光标移动">一、控制台窗口光标移动</h4><p>  原本控制台的光标是逐文本向后的，我们要想实现任意位置的文本重输出就需要将光标移动到指定位置，然后覆盖原文本。但是， Windows 系统并没有为我们提供相应的 API ，所以我们需要自己编写一个函数用来控制控制台光标的位置。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;定位函数void gotoxy(int x, int y)&#123;\tCOORD pos &#x3D; &#123; x,y &#125;;&#x2F;&#x2F; 是表示 pos 坐标位置为参数对应的(x，y)\tHANDLE hOut &#x3D; GetStdHandle(STD_OUTPUT_HANDLE);&#x2F;&#x2F; 创建一个 hOut 句柄变量来接收标准输出句柄\tSetConsoleCursorPosition(hOut, pos);&#x2F;&#x2F; 该函数设置控制台(cmd)光标位置&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注释：</strong><br>  COORD是Windows API中定义的一种结构，表示一个字符在控制台屏幕上的坐标。其定义为：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct _COORD &#123;\tSHORT X; &#x2F;&#x2F; horizontal coordinate\tSHORT Y; &#x2F;&#x2F; vertical coordinate&#125; COORD;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、键盘事件监听">二、键盘事件监听</h4><p>  输入事件中的键盘事件通常有字符事件和按键事件，这些事件的附带信息构成了键盘输入的信息，而想要读取这些信息，是要通过API函数 ReadConsoleInput来获取的，函数原型如下：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">BOOL ReadConsoleInput(              &#x2F;&#x2F;读取输入信息    HANDLE hConsoleInput,           &#x2F;&#x2F;句柄    PINPUT_RECORD lpBuffer,         &#x2F;&#x2F;输入事件结构体的指针    DWORD nLength,                  &#x2F;&#x2F;要读取的记录数    LPDWORD lpNumberOfEventsRead    &#x2F;&#x2F;用来接受成功读取记录数的指针);  &#x2F;&#x2F;如果该函数成功调用，返回非零值&#x2F;&#x2F;输入事件结构体的指针可以是结构体数组的首地址，这样就可以一次性读取多个记录数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  另外还需要了解几个和读取键盘输入事件有关的结构体，各结构体原型如下：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct _INPUT_RECORD    &#x2F;&#x2F;输入事件结构体&#123;    WORD  EventType;    &#x2F;&#x2F;事件类型    union    &#123;        KEY_EVENT_RECORD          KeyEvent;     &#x2F;&#x2F;按键事件        MOUSE_EVENT_RECORD        MouseEvent;   &#x2F;&#x2F;鼠标事件        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;        MENU_EVENT_RECORD         MenuEvent;        FOCUS_EVENT_RECORD        FocusEvent;    &#125; Event;    &#x2F;&#x2F;具体的事件&#125; INPUT_RECORD;&#x2F;*其中事件类型EventType的值有5种KEY_EVENT                   代表Event包含一个KEY_EVENT_RECODE结构体MOUSE_EVENT                 代表Event包含一个MOUSE_EVENT_RECODE结构体WINDOW_BUFFER_SIZE_EVENT    代表Event包含一个WINDOW_BUFFER_SIZE_EVENT_RECORD结构体MENU_EVENT                  代表Event包含一个MENU_EVENT_RECORD结构体FOCUS_EVENT                 代表Event包含一个FOCUS_EVENT_RECORD结构体*&#x2F; typedef struct _KEY_EVENT_RECORD    &#x2F;&#x2F;键盘事件结构体 &#123;    BOOL  bKeyDown;             &#x2F;&#x2F;按键状态，true代表键按下，false代表键释放    WORD  wRepeatCount;         &#x2F;&#x2F;按键次数    WORD  wVirtualKeyCode;      &#x2F;&#x2F;虚拟键    WORD  wVirtualScanCode;     &#x2F;&#x2F;虚拟键扫描码    union    &#123;        WCHAR UnicodeChar;      &#x2F;&#x2F;解释成Unicode宽字符        CHAR  AsciiChar;        &#x2F;&#x2F;解释成ASCII码字符    &#125; uChar;    DWORD dwControlKeyState;    &#x2F;&#x2F;控制键状态&#125; KEY_EVENT_RECORD;&#x2F;*控制键各状态的值ENHANCED_KEY        扩展键被按下LEFT_ALT_PRESSED    左Alt键被按下LEFT_CTRL_PRESSED   左Ctrl键被按下RIGHT_ALT_PRESSED   右Alt键被按下RIGHT_CTRL_PRESSED  右Ctrl键被按下NUMLOCK_ON          数字锁定被打开SCROLLLOCK_ON       滚动锁定被打开CAPSLOCK_ON         大写锁定被打开SHIFT_PRESSED       Shift键被按下*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  接下来我们可以写一个最简单的实例代码以供参考：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;windows.h&gt;#include &lt;conio.h&gt;#define true 1#define false 0 int main()&#123;    HANDLE handle_in &#x3D; GetStdHandle(STD_INPUT_HANDLE);      &#x2F;&#x2F;获得标准输入设备句柄    INPUT_RECORD keyrec;        &#x2F;&#x2F;定义输入事件结构体    DWORD res;      &#x2F;&#x2F;定义返回记录    \twhile (1)    &#123;        ReadConsoleInput(handle_in, &amp;keyrec, 1, &amp;res);      &#x2F;&#x2F;读取输入事件        if (keyrec.EventType &#x3D;&#x3D; KEY_EVENT)      &#x2F;&#x2F;如果当前事件是键盘事件        &#123;            if (keyrec.Event.KeyEvent.wVirtualKeyCode &#x3D;&#x3D; VK_ESCAPE) &#x2F;&#x2F;当前事件的虚拟键为Esc键            &#123;                printf(&quot;Esc &quot;);            &#125;        &#125;    &#125;\t    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong><br>  在上面的样例程序中，当你按下Esc键后又马上释放，程序会输出<strong>两次Esc</strong>，因为有两次事件的虚拟键代码都是Esc键的代码，一次是<strong>按下</strong>，一次是<strong>释放</strong>。如果要实现按下键后出现反应，释放不出现反应，那么需将上例程序中第18行代码的条件改成：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (keyrec.Event.KeyEvent.wVirtualKeyCode &#x3D;&#x3D; VK_ESCAPE    &amp;&amp; keyrec.Event.KeyEvent.bKeyDown &#x3D;&#x3D; true)     &#x2F;&#x2F;表示当前为键按下而不是键释放<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  根据控制键的状态我们可以实现不同的状态输出不同的值以及组合键的实现，下面的样例程序在大写锁定打开时输入A键则输出大写字母A，否则输出小写字母a。而在Shift键被按下的状态是则输出Shift+A以及Shift+a。样例程序如下:</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;windows.h&gt;#include &lt;conio.h&gt;#define true 1#define false 0 int main()&#123;    HANDLE handle_in &#x3D; GetStdHandle(STD_INPUT_HANDLE);      &#x2F;&#x2F;获得标准输入设备句柄    INPUT_RECORD keyrec;        &#x2F;&#x2F;定义输入事件结构体    DWORD res;      &#x2F;&#x2F;定义返回记录    while (1)    &#123;        ReadConsoleInput(handle_in, &amp;keyrec, 1, &amp;res);      &#x2F;&#x2F;读取输入事件        if (keyrec.EventType &#x3D;&#x3D; KEY_EVENT)      &#x2F;&#x2F;如果当前事件是键盘事件        &#123;            if (keyrec.Event.KeyEvent.wVirtualKeyCode &#x3D;&#x3D; &#39;A&#39;                &amp;&amp; keyrec.Event.KeyEvent.bKeyDown &#x3D;&#x3D; true)   &#x2F;&#x2F;当按下字母A键时            &#123;                if (keyrec.Event.KeyEvent.dwControlKeyState &amp; SHIFT_PRESSED)    &#x2F;&#x2F;Shift键为按下状态                &#123;                    printf(&quot;Shift+&quot;);                &#125;                \t\t\t\tif (keyrec.Event.KeyEvent.dwControlKeyState &amp; CAPSLOCK_ON)  &#x2F;&#x2F;大写锁定为打开状态                &#123;                    printf(&quot;A &quot;);                &#125;                else        &#x2F;&#x2F;大写锁定关闭状态                &#123;                    printf(&quot;a &quot;);                &#125;            &#125;        &#125;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  最后附上<strong>部分常用虚拟键代码表</strong>：</p><table><thead><tr><th style="text-align:center">虚拟键代码</th><th style="text-align:center">值</th><th style="text-align:center">键名称</th></tr></thead><tbody><tr><td style="text-align:center">VK_BACK</td><td style="text-align:center">0x08</td><td style="text-align:center">退格键</td></tr><tr><td style="text-align:center">VK_TAB</td><td style="text-align:center">0x09</td><td style="text-align:center">Tab键</td></tr><tr><td style="text-align:center">VK_RETURN</td><td style="text-align:center">0x0D</td><td style="text-align:center">回车键</td></tr><tr><td style="text-align:center">VK_SHIFT</td><td style="text-align:center">0x10</td><td style="text-align:center">Shift键</td></tr><tr><td style="text-align:center">VK_LSHIFT</td><td style="text-align:center">0xA0</td><td style="text-align:center">左Shift键</td></tr><tr><td style="text-align:center">VK_RSHIFT</td><td style="text-align:center">0xA1</td><td style="text-align:center">右Shift键</td></tr><tr><td style="text-align:center">VK_CONTROL</td><td style="text-align:center">0x11</td><td style="text-align:center">Ctrl键</td></tr><tr><td style="text-align:center">VK_LCONTROL</td><td style="text-align:center">0xA2</td><td style="text-align:center">左Ctrl键</td></tr><tr><td style="text-align:center">VK_RCONTROL</td><td style="text-align:center">0xA3</td><td style="text-align:center">右Ctrl键</td></tr><tr><td style="text-align:center">VK_MENU</td><td style="text-align:center">0x12</td><td style="text-align:center">Alt键</td></tr><tr><td style="text-align:center">VK_LMENU</td><td style="text-align:center">0xA4</td><td style="text-align:center">左Alt键</td></tr><tr><td style="text-align:center">VK_RMENU</td><td style="text-align:center">0xA5</td><td style="text-align:center">右Alt键</td></tr><tr><td style="text-align:center">VK_PAUSE</td><td style="text-align:center">0x13</td><td style="text-align:center">Pause键</td></tr><tr><td style="text-align:center">VK_CAPITAL</td><td style="text-align:center">0x14</td><td style="text-align:center">Caps Lock键</td></tr><tr><td style="text-align:center">VK_NUMLOCK</td><td style="text-align:center">0x90</td><td style="text-align:center">Num Lock键</td></tr><tr><td style="text-align:center">VK_SCROLL</td><td style="text-align:center">0x91</td><td style="text-align:center">Scroll Lock键</td></tr><tr><td style="text-align:center">VK_ESCAPE</td><td style="text-align:center">0x1B</td><td style="text-align:center">Esc键</td></tr><tr><td style="text-align:center">VK_SPACE</td><td style="text-align:center">0x20</td><td style="text-align:center">空格键</td></tr><tr><td style="text-align:center">VK_PRIOR</td><td style="text-align:center">0x21</td><td style="text-align:center">Page Up键</td></tr><tr><td style="text-align:center">VK_NEXT</td><td style="text-align:center">0x22</td><td style="text-align:center">Page Down键</td></tr><tr><td style="text-align:center">VK_END</td><td style="text-align:center">0x23</td><td style="text-align:center">End键</td></tr><tr><td style="text-align:center">VK_HOME</td><td style="text-align:center">0x24</td><td style="text-align:center">Home键</td></tr><tr><td style="text-align:center">VK_LEFT</td><td style="text-align:center">0x25</td><td style="text-align:center">左方向键</td></tr><tr><td style="text-align:center">VK_UP</td><td style="text-align:center">0x26</td><td style="text-align:center">上方向键</td></tr><tr><td style="text-align:center">VK_RIGHT</td><td style="text-align:center">0x27</td><td style="text-align:center">右方向键</td></tr><tr><td style="text-align:center">VK_DOWN</td><td style="text-align:center">0x28</td><td style="text-align:center">下方向键</td></tr><tr><td style="text-align:center">VK_DELETE</td><td style="text-align:center">0x2E</td><td style="text-align:center">Delete键</td></tr><tr><td style="text-align:center">VK_INSERT</td><td style="text-align:center">0x2D</td><td style="text-align:center">Insert键</td></tr><tr><td style="text-align:center">‘0’</td><td style="text-align:center">0x30</td><td style="text-align:center">0键（非小键盘）</td></tr><tr><td style="text-align:center">‘1’</td><td style="text-align:center">0x31</td><td style="text-align:center">1键（非小键盘）</td></tr><tr><td style="text-align:center">‘2’</td><td style="text-align:center">0x32</td><td style="text-align:center">2键（非小键盘）</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">‘9’</td><td style="text-align:center">0x39</td><td style="text-align:center">9键（非小键盘）</td></tr><tr><td style="text-align:center">‘A’</td><td style="text-align:center">0x41</td><td style="text-align:center">A键</td></tr><tr><td style="text-align:center">‘B’</td><td style="text-align:center">0x42</td><td style="text-align:center">B键</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">‘Z’</td><td style="text-align:center">0x5A</td><td style="text-align:center">Z键</td></tr><tr><td style="text-align:center">VK_SLEEP</td><td style="text-align:center">0x5F</td><td style="text-align:center">Sleep键</td></tr><tr><td style="text-align:center">VK_NUMPAD0</td><td style="text-align:center">0x60</td><td style="text-align:center">小键盘0键</td></tr><tr><td style="text-align:center">VK_NUMPAD1</td><td style="text-align:center">0x61</td><td style="text-align:center">小键盘1键</td></tr><tr><td style="text-align:center">VK_NUMPAD2</td><td style="text-align:center">0x62</td><td style="text-align:center">小键盘2键</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">VK_NUMPAD9</td><td style="text-align:center">0x69</td><td style="text-align:center">小键盘9键</td></tr><tr><td style="text-align:center">VK_MULTIPLY</td><td style="text-align:center">0x6A</td><td style="text-align:center">小键盘乘键*</td></tr><tr><td style="text-align:center">VK_ADD</td><td style="text-align:center">0x6B</td><td style="text-align:center">小键盘加键+</td></tr><tr><td style="text-align:center">VK_SUBTRACT</td><td style="text-align:center">0x6D</td><td style="text-align:center">小键盘减键-</td></tr><tr><td style="text-align:center">VK_DIVIDE</td><td style="text-align:center">0x6F</td><td style="text-align:center">小键盘除键/</td></tr><tr><td style="text-align:center">VK_DECIMAL</td><td style="text-align:center">0x6E</td><td style="text-align:center">小键盘点键.</td></tr><tr><td style="text-align:center">VK_F1</td><td style="text-align:center">0x70</td><td style="text-align:center">F1键</td></tr><tr><td style="text-align:center">VK_F2</td><td style="text-align:center">0x71</td><td style="text-align:center">F2键</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">VK_F12</td><td style="text-align:center">0x7B</td><td style="text-align:center">F12键</td></tr><tr><td style="text-align:center">VK_F13</td><td style="text-align:center">0x7C</td><td style="text-align:center">F13键<br/>注：别问我，<br/>我也不知道<br/>什么电脑有这么多键</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">VK_F24</td><td style="text-align:center">0x87</td><td style="text-align:center">F24键</td></tr><tr><td style="text-align:center">VK_OEM_1</td><td style="text-align:center">0xBA</td><td style="text-align:center">;:键</td></tr><tr><td style="text-align:center">VK_OEM_2</td><td style="text-align:center">0xBF</td><td style="text-align:center">/?键</td></tr><tr><td style="text-align:center">VK_OEM_3</td><td style="text-align:center">0xC0</td><td style="text-align:center">·~键</td></tr><tr><td style="text-align:center">VK_OEM_4</td><td style="text-align:center">0xDB</td><td style="text-align:center">[{键</td></tr><tr><td style="text-align:center">VK_OEM_5</td><td style="text-align:center">0xDC</td><td style="text-align:center">\|键</td></tr><tr><td style="text-align:center">VK_OEM_6</td><td style="text-align:center">0xDD</td><td style="text-align:center">]}键</td></tr><tr><td style="text-align:center">VK_OEM_7</td><td style="text-align:center">0xDE</td><td style="text-align:center">'&quot;键</td></tr><tr><td style="text-align:center">VK_OEM_PLUS</td><td style="text-align:center">0xBB</td><td style="text-align:center">=+键</td></tr><tr><td style="text-align:center">VK_OEM_MINUS</td><td style="text-align:center">0xBD</td><td style="text-align:center">-_键</td></tr><tr><td style="text-align:center">VK_OEM_COMMA</td><td style="text-align:center">0xBC</td><td style="text-align:center">,&lt;键</td></tr><tr><td style="text-align:center">VK_OEM_PERIOD</td><td style="text-align:center">0xBE</td><td style="text-align:center">.&gt;键</td></tr></tbody></table><h4 id="三、按键高亮（控制台局部文本的样式控制）">三、按键高亮（控制台局部文本的样式控制）</h4><p>  控制台局部文本样式是通过控制台的转义序列来实现的，这是文本模式下的系统显示功能。转义序列是以ESC开始的，即\033，ESC的十进制是27，转为八进制就是33了。<br>  通用格式大致为ESC<code>[&#123;attr1&#125;;&#123;attr2&#125;;…;&#123;attrn&#125;m</code>，其中 <strong>attr</strong> 表示的是属性，也是属性值，通常直接就是数字表示了。在此我们进行三个常用属性的设置，主要是<strong>显示方式</strong>、<strong>字体颜色</strong>和<strong>背景色</strong>。</p><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch">显示方式<span class="token command"><span class="token keyword">0</span> （默认值）</span><span class="token command"><span class="token keyword">1</span> （高亮显示，顺便加粗？不确定）</span><span class="token command"><span class="token keyword">2</span> （暗淡）</span><span class="token command"><span class="token keyword">22</span>（非粗体，不确定）</span><span class="token command"><span class="token keyword">4</span> （下划线）</span><span class="token command"><span class="token keyword">5</span> （闪烁，但是我没看出有什么效果。。）</span><span class="token command"><span class="token keyword">25</span>（非闪烁）</span><span class="token command"><span class="token keyword">7</span> （反显，我也没看出效果）</span><span class="token command"><span class="token keyword">27</span>（非反显）</span><span class="token command"><span class="token keyword">8</span> （隐藏）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch">字体颜色<span class="token command"><span class="token keyword">30</span>（黑色）</span><span class="token command"><span class="token keyword">31</span>（红色）</span><span class="token command"><span class="token keyword">32</span>（绿色）</span><span class="token command"><span class="token keyword">33</span>（黄色）</span><span class="token command"><span class="token keyword">34</span>（蓝色）</span><span class="token command"><span class="token keyword">35</span>（品红）</span><span class="token command"><span class="token keyword">36</span>（青色）</span><span class="token command"><span class="token keyword">37</span>（白色）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch">背景色<span class="token command"><span class="token keyword">40</span>（黑色）</span><span class="token command"><span class="token keyword">41</span>（红色）</span><span class="token command"><span class="token keyword">42</span>（绿色）</span><span class="token command"><span class="token keyword">43</span>（黄色）</span><span class="token command"><span class="token keyword">44</span>（蓝色）</span><span class="token command"><span class="token keyword">45</span>（品红）</span><span class="token command"><span class="token keyword">46</span>（青色）</span><span class="token command"><span class="token keyword">47</span>（白色）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  下面给出一个参考实例，仅供参考：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">printf(&quot;\033[4;31;42m*测试文本*\033[0m&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>效果图：</strong></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-05-16_18-18-28.jpg" alt=""></p><h2 id="结束语">结束语</h2><p>  到这里，相关的核心知识点都已经总结完成。剩下的具体功能还需要自己自行开发和实现，过多的叙述往往会限制大家的创造能力。所以，相关的逻辑代码就由大家自己完成吧！<br>  补充一下，那个按键选择实际上并不是真的有个按键，而是通过光标重新定位然后覆盖原输出，做出按键选择到了该位置的假象…好了，就说这么多吧！拜拜ヾ(•ω•`)o~</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Console Application </tag>
            
            <tag> 事件监听 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Wallpaper Engine 部分壁纸黑屏问题</title>
      <link href="/2022/04/06/jie-jue-wallpaper-engine-bu-fen-bi-zhi-hei-ping-wen-ti/"/>
      <url>/2022/04/06/jie-jue-wallpaper-engine-bu-fen-bi-zhi-hei-ping-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>最近遇到了 Wallpaper Engine 部分壁纸黑屏无法显示的问题…</p><p>Emmm…捣鼓了很久都没办法解决！</p><p>几乎一连几天都在逛贴吧、刷帖子和看文档（Wallpaper Engine官方文档也试过了）…</p><p>但是都没有解决！</p><p>一开始以为是有什么软件冲突了，但是卸载了大量软件后依然没有解决！</p><p>后来在 Wallpaper Engine 的官方文档中找到一下解释：</p><blockquote><p>如果部分或全部壁纸不显示，其原因通常是防病毒应用程序错误地阻止了 Wallpaper Engine。 如果您使用防病毒应用程序，请务必对其进行配置，使其忽略 wallpaper_engine 安装目录以及 Wallpaper Engine 所有重要的可执行文件：</p></blockquote><p>wallpaper_engine/wallpaper32.exe<br>wallpaper_engine/wallpaper64.exe<br>wallpaper_engine/launcher.exe<br>wallpaper_engine/bin/webwallpaper32.exe<br>wallpaper_engine/bin/ui32.exe</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wallpaper Engine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VS】如何获取应用程序所在路径？</title>
      <link href="/2022/04/04/vs-ru-he-huo-qu-ying-yong-cheng-xu-suo-zai-lu-jing/"/>
      <url>/2022/04/04/vs-ru-he-huo-qu-ying-yong-cheng-xu-suo-zai-lu-jing/</url>
      
        <content type="html"><![CDATA[<p>众所周知程序当前所在目录在我们的编程中有着重要的作用，所以如何获取该变量显得很重要！</p><p>下面我说说我的思路，并保持更新！以便使用更优质的办法！</p><h2 id="实现思路">实现思路</h2><hr><h3 id="GetModuleFileName-splitpath-sprintf">GetModuleFileName + _splitpath + sprintf</h3><hr><blockquote><p>假设我的 Demo.exe 现在的路径信息是： C:\Test\Room\Demo.exe</p></blockquote><ol><li><p>首先我们可以使用 <code>GetModuleFileName</code> 函数获取程序的绝对路径！也就是： <code>C:\Test\Room\Demo.exe</code> ！</p></li><li><p>然后使用 <code>_splitpath</code> 函数分割该路径的个个部分，得到该路径的 “驱动器号(<code>C:</code>)”、“目录路径(<code>\Test\Room\</code>)”、“基文件名(<code>Demo</code>)”和“文件扩展名(<code>.exe</code>)”。</p></li><li><p>最后用 <code>sprintf</code> 函数组装出我们需要的信息。</p></li></ol><p>下面讲解一下用到的这三个函数，方便大家在今后的编程中灵活运用它们！</p><h2 id="函数讲解">函数讲解</h2><hr><blockquote><p>详情请参考 Microsoft 的 MSDN 文档</p></blockquote><h3 id="一、GetModuleFileName">一、GetModuleFileName</h3><h4 id="函数声明">函数声明</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">DWORD <span class="token function">GetModuleFileNameA</span><span class="token punctuation">(</span>  <span class="token punctuation">[</span>in<span class="token punctuation">,</span> optional<span class="token punctuation">]</span> HMODULE hModule<span class="token punctuation">,</span>  <span class="token punctuation">[</span>out<span class="token punctuation">]</span>          LPSTR   lpFilename<span class="token punctuation">,</span>  <span class="token punctuation">[</span>in<span class="token punctuation">]</span>           DWORD   nSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>参数 <code>hModule</code></strong></li></ol><p> 正在请求其路径程序的句柄。</p><p> 如果此参数为 <code>NULL</code>，则 <code>GetModuleFileName</code> 将检索当前进程的可执行文件的路径。</p><p> 因为我们需要获取的是当前程序的路径，所以我们需要检索路径的程序就是当前进程对应的可执行文件。所以这一项我们可以填<code>NULL</code>。</p><ol start="2"><li><strong>参数 <code>lpFilename</code></strong></li></ol><p> 指向接收模块的完全限定路径的缓冲区的指针。如果路径的长度小于 <code>nSize</code> 参数指定的大小，则函数将成功，并且路径将作为 <code>NULL</code> 终止的字符串返回。</p><p> 如果路径的长度超过 <code>nSize</code> 参数指定的大小，则函数将成功，并且字符串将被截断为 <code>nSize</code> 字符，包括终止空字符。</p><ol start="3"><li><strong>参数 <code>nSize</code></strong></li></ol><p> <code>lpFilename</code> 缓冲区的大小。</p><h4 id="返回值">返回值</h4><p>如果函数成功，则返回值是复制到缓冲区的字符串的长度（以字符为单位），不包括终止空字符。如果缓冲区太小而无法容纳模块名称，则字符串将被截断为 <code>nSize</code> 字符（包括终止空字符），函数返回 <code>nSize</code>，并且函数将最后一个错误设置为<code>ERROR_INSUFFICIENT_BUFFER</code>。</p><p><strong>Windows XP：</strong> 如果缓冲区太小而无法保存模块名称，则该函数将返回 <code>nSize</code>。最后一个错误代码将保留<code>ERROR_SUCCESS</code>。如果 <code>nSize</code> 为零，则返回值为零，最后一个错误代码<code>ERROR_SUCCESS</code>。</p><p>如果函数失败，则返回值为 0（零）。</p><h4 id="要求">要求</h4><p>记得使用该函数需要头文件 <code>&lt;Windows.h&gt;</code></p><blockquote><p>详情请参考 Microsoft 的 MSDN 文档: <a href="https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulefilenamea">GetModuleFileName</a></p></blockquote><h3 id="二、-splitpath">二、_splitpath</h3><h4 id="函数声明-2">函数声明</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">_splitpath</span><span class="token punctuation">(</span>   <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span>   <span class="token keyword">char</span> <span class="token operator">*</span>drive<span class="token punctuation">,</span>   <span class="token keyword">char</span> <span class="token operator">*</span>dir<span class="token punctuation">,</span>   <span class="token keyword">char</span> <span class="token operator">*</span>fname<span class="token punctuation">,</span>   <span class="token keyword">char</span> <span class="token operator">*</span>ext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>参数 <code>path</code></strong></li></ol><p> 此参数用于向函数传递需要分解的原路径。</p><ol start="2"><li><strong>参数 <code>drive</code></strong></li></ol><p> 接收分割得到的“驱动器号”。</p><ol start="3"><li><strong>参数 <code>dir</code></strong></li></ol><p> 接收分割得到的“目录路径”。</p><ol start="4"><li><strong>参数 <code>fname</code></strong></li></ol><p> 接收分割得到的“基文件名”。</p><ol start="5"><li><strong>参数 <code>ext</code></strong></li></ol><p> 接收分割得到的“文件扩展名”（带符号 ‘.’）。</p><h4 id="返回值-2">返回值</h4><p>该函数没有返回值，通过参数 <code>drive</code>、<code>dir</code>、<code>name</code> 和 <code>ext</code> 返回分解之后的各个部分。</p><h4 id="要求-2">要求</h4><p>记得使用该函数需要头文件 <code>&lt;stdlib.h&gt;</code></p><blockquote><p>详情请参考 Microsoft 的 MSDN 文档: <a href="https://docs.microsoft.com/zh-cn/cpp/c-runtime-library/reference/splitpath-wsplitpath?view=msvc-170">_splitpath</a></p></blockquote><h3 id="三、-sprintf">三、 sprintf</h3><h4 id="函数声明如下：">函数声明如下：</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><strong>参数 <code>str</code></strong></li></ol><p> 这是指向一个字符数组的指针，该数组存储了 C 字符串。</p><ol start="2"><li><strong>参数 <code>format</code></strong></li></ol><p> 这是字符串，包含了要被写入到字符串 <code>str</code> 的文本。它可以包含嵌入的 <code>format</code> 标签，<code>format</code> 标签可被随后的附加参数中指定的值替换，并按需求进行格式化。<code>format</code> 标签属性是 <strong>%[flags][width][.precision][length]specifier</strong>，具体讲解如下：</p><table><thead><tr><th style="text-align:center">specifier（说明符）</th><th style="text-align:left">输出</th></tr></thead><tbody><tr><td style="text-align:center">c</td><td style="text-align:left">字符</td></tr><tr><td style="text-align:center">d 或 i</td><td style="text-align:left">有符号十进制整数</td></tr><tr><td style="text-align:center">e</td><td style="text-align:left">使用 e 字符的科学科学记数法（尾数和指数）</td></tr><tr><td style="text-align:center">E</td><td style="text-align:left">使用 E 字符的科学科学记数法（尾数和指数）</td></tr><tr><td style="text-align:center">f</td><td style="text-align:left">十进制浮点数</td></tr><tr><td style="text-align:center">g</td><td style="text-align:left">自动选择 %e 或 %f 中合适的表示法</td></tr><tr><td style="text-align:center">G</td><td style="text-align:left">自动选择 %E 或 %f 中合适的表示法</td></tr><tr><td style="text-align:center">o</td><td style="text-align:left">有符号八进制</td></tr><tr><td style="text-align:center">s</td><td style="text-align:left">字符的字符串</td></tr><tr><td style="text-align:center">u</td><td style="text-align:left">无符号十进制整数</td></tr><tr><td style="text-align:center">x</td><td style="text-align:left">无符号十六进制整数</td></tr><tr><td style="text-align:center">X</td><td style="text-align:left">无符号十六进制整数（大写字母）</td></tr><tr><td style="text-align:center">p</td><td style="text-align:left">指针地址</td></tr><tr><td style="text-align:center">n</td><td style="text-align:left">无输出</td></tr><tr><td style="text-align:center">%</td><td style="text-align:left">字符</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:center">flags（标识）</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:left">在给定的字段宽度内左对齐，默认是右对齐（参见 width 子说明符）。</td></tr><tr><td style="text-align:center">+</td><td style="text-align:left">强制在结果之前显示加号或减号（+ 或 -），即正数前面会显示 + 号。默认情况下，只有负数前面会显示一个 - 号。</td></tr><tr><td style="text-align:center">(space)</td><td style="text-align:left">如果没有写入任何符号，则在该值前面插入一个空格。</td></tr><tr><td style="text-align:center">#</td><td style="text-align:left">与 o、x 或 X 说明符一起使用时，非零值前面会分别显示 0、0x 或 0X。<br/>与 e、E 和 f 一起使用时，会强制输出包含一个小数点，即使后边没有数字时也会显示小数点。默认情况下，如果后边没有数字时候，不会显示显示小数点。<br/>与 g 或 G 一起使用时，结果与使用 e 或 E 时相同，但是尾部的零不会被移除。</td></tr><tr><td style="text-align:center">0</td><td style="text-align:left">在指定填充 padding 的数字左边放置零（0），而不是空格（参见 width 子说明符）。</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:center">width（宽度）</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">(number)</td><td style="text-align:left">要输出的字符的最小数目。如果输出的值短于该数，结果会用空格填充。如果输出的值长于该数，结果不会被截断。</td></tr><tr><td style="text-align:center">*</td><td style="text-align:left">宽度在 format 字符串中未指定，但是会作为附加整数值参数放置于要被格式化的参数之前。</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:center">.precision（精度）</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">.number</td><td style="text-align:left">对于整数说明符（d、i、o、u、x、X）：precision 指定了要写入的数字的最小位数。如果写入的值短于该数，结果会用前导零来填充。如果写入的值长于该数，结果不会被截断。精度为 0 意味着不写入任何字符。<br/>对于 e、E 和 f 说明符：要在小数点后输出的小数位数。<br/>对于 g 和 G 说明符：要输出的最大有效位数。<br/>对于 s: 要输出的最大字符数。默认情况下，所有字符都会被输出，直到遇到末尾的空字符。<br/>对于 c 类型：没有任何影响。<br/>当未指定任何精度时，默认为 1。如果指定时不带有一个显式值，则假定为 0。</td></tr><tr><td style="text-align:center">.*</td><td style="text-align:left">精度在 format 字符串中未指定，但是会作为附加整数值参数放置于要被格式化的参数之前。</td></tr></tbody></table><hr><table><thead><tr><th style="text-align:center">length（长度）</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">h</td><td style="text-align:left">参数被解释为短整型或无符号短整型（仅适用于整数说明符：i、d、o、u、x 和 X）。</td></tr><tr><td style="text-align:center">l</td><td style="text-align:left">参数被解释为长整型或无符号长整型，适用于整数说明符（i、d、o、u、x 和 X）及说明符 c（表示一个宽字符）和 s（表示宽字符字符串）。</td></tr><tr><td style="text-align:center">L</td><td style="text-align:left">参数被解释为长双精度型（仅适用于浮点数说明符：e、E、f、g 和 G）。</td></tr></tbody></table><ol start="3"><li><strong>附加参数</strong></li></ol><p> 根据不同的 <code>format</code> 字符串，函数可能需要一系列的附加参数，每个参数包含了一个要被插入的值，替换了 <code>format</code> 参数中指定的每个 % 标签。参数的个数应与 % 标签的个数相同。</p><h4 id="返回值-3">返回值</h4><p>如果成功，则返回写入的字符总数，不包括字符串追加在字符串末尾的空字符。如果失败，则返回一个负数。</p><h4 id="要求-3">要求</h4><p>记得使用该函数需要头文件 <code>&lt;stdio.h&gt;</code></p><h2 id="具体实例">具体实例</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">TCHAR proPath_m<span class="token punctuation">[</span>_MAX_PATH<span class="token punctuation">]</span><span class="token punctuation">,</span> Drive_m<span class="token punctuation">[</span>_MAX_DRIVE<span class="token punctuation">]</span><span class="token punctuation">,</span> Dir_m<span class="token punctuation">[</span>_MAX_DIR<span class="token punctuation">]</span><span class="token punctuation">,</span> FName_m<span class="token punctuation">[</span>_MAX_FNAME<span class="token punctuation">]</span><span class="token punctuation">,</span> Ext_m<span class="token punctuation">[</span>_MAX_EXT<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">GetModuleFileName</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LPSTR<span class="token punctuation">)</span>proPath_m<span class="token punctuation">,</span> MAX_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">_splitpath</span><span class="token punctuation">(</span>proPath_m<span class="token punctuation">,</span> Drive_m<span class="token punctuation">,</span> Dir_m<span class="token punctuation">,</span> FName_m<span class="token punctuation">,</span> Ext_m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>workDir<span class="token punctuation">,</span> <span class="token function">__TEXT</span><span class="token punctuation">(</span><span class="token string">"%s%s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Drive_m<span class="token punctuation">,</span> Dir_m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 得到 C:\Test\Room\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="补充-2">补充</h2><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">值</th></tr></thead><tbody><tr><td style="text-align:center"><code>_MAX_DRIVE</code></td><td style="text-align:center"><code>3</code></td></tr><tr><td style="text-align:center"><code>_MAX_DIR</code></td><td style="text-align:center"><code>256</code></td></tr><tr><td style="text-align:center"><code>_MAX_FNAME</code></td><td style="text-align:center"><code>256</code></td></tr><tr><td style="text-align:center"><code>_MAX_EXT</code></td><td style="text-align:center"><code>256</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio </tag>
            
            <tag> Win32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置代码高亮 | Hexo-Matery</title>
      <link href="/2022/03/30/she-zhi-dai-ma-gao-liang-hexo-matery/"/>
      <url>/2022/03/30/she-zhi-dai-ma-gao-liang-hexo-matery/</url>
      
        <content type="html"><![CDATA[<p>代码不高亮？别逗！</p><p>不高亮的代码莫得灵魂！</p><blockquote><p>这里先说明一下，我使用的是 <code>hexo-theme-matery</code> 和 <code>hexo@6.1.0</code></p></blockquote><h2 id="准备文件">准备文件</h2><hr><h3 id="下载">下载</h3><p><a href="./prism.css">点击下载</a> <code>prism.css</code><br><a href="./prism.js">点击下载</a> <code>prism.js</code></p><p>然后将这两份文件复制到 <code>博客根目录/themes/&#123;主题文件夹&#125;/source/libs/prism/</code> 目录下！</p><h3 id="说明">说明</h3><p>您可能会发现在该目录下会已经存在一个 <code>prism.css</code> 文件，那是主题自带的，也可以使用，您可以按照需自己的需求来！但是<strong>如果使用默认的</strong> <code>prism.css</code> <strong>一定使用配套的</strong> <code>prism.js</code> ！否则会出现问题！如果想使用自定义的 <code>prismJS</code> 高亮规则，可以去官网配置并下载：<a href="">自定义 prismJS 规则</a>！</p><p><strong>补充：</strong><br>我不知道为什么，我的 <code>博客根目录/themes/&#123;主题文件夹&#125;/source/libs/prism/</code> 目录下只有一个 <code>prism.css</code> ，这使得我的博客代码高亮出了很大问题！后来我自己配置一套 <code>prismJS</code> 文件后才解决的问题！</p><p>同时，您需要知道的是：PrismJS 官网下载的 prism 文件在 <code>hexo-theme-matery</code> 主题下显示有些冲突，需要您去修改对应的 CSS 文件。这里我已经修改好了，所以 <code>hexo-theme-matery</code> 主题的朋友，您可以直接使用我提供的下载，它支持几乎所有语言得代码高亮！（其他主题我未做探索）</p><h2 id="配置-prismJS">配置 | prismJS</h2><hr><p>这里我只讲解 <code>prismJS</code> 的配置方法，因为它不会像 <code>Highlight</code> 在 <code>hexo-theme-matery</code> 主题中出现显示问题（个人感觉 Matery 主题更适合使用 <code>prismJS</code> 进行代码高亮）</p><h3 id="修改-config-yml-根目录">修改 _config.yml(根目录)</h3><p>在根目录下的 <code>_config.yml</code> 文件中找到对应代码位置并修改成如下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><div class="caption"><span>_config.yml(根目录)</span></div><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 关闭 highlight</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 启用 prismjs</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Hexo 内建的 PrismJS 支持浏览器端高亮（preprocess 设置为 false）和服务器端高亮（preprocess 设置为 true）两种方式</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否显示行号</span>  <span class="token key atrule">line_threshold</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 接受一个可选的阈值，只要代码块的行数超过这个阈值，就只显示行号。 默认值为 0。</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token comment"># 用代码内的 tab (\t) 替换为给定值，默认值是两个空格。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-config-yml-主题目录">修改 _config.yml(主题目录)</h3><p>在根目录下的 <code>_config.yml</code> 文件中找到对应代码位置并确保 <code>libs.css.prism</code> 和 <code>libs.js.prism</code> 中的路径如下（如果没有就手动添上）：</p><pre class="line-numbers language-yaml" data-language="yaml"><div class="caption"><span>_config.yml(主题目录)</span></div><code class="language-yaml"><span class="token key atrule">libs</span><span class="token punctuation">:</span>  <span class="token key atrule">css</span><span class="token punctuation">:</span>    <span class="token key atrule">prism</span><span class="token punctuation">:</span> /libs/prism/prism.css <span class="token comment"># 标注 prism.css 文件位置</span>      <span class="token key atrule">js</span><span class="token punctuation">:</span>    <span class="token key atrule">prism</span><span class="token punctuation">:</span> /libs/prism/prism.js <span class="token comment"># 标注 prism.js 文件位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是我的配置参数，<strong>仅供参考</strong>：<br><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-03-31_10-29-58.jpg" alt="我的配置"></p><h3 id="修改-post-detail-ejs">修改 post-detail.ejs</h3><p>最后打开 <code>博客根目录/themes/&#123;主题文件夹&#125;/layout/_partial/post-detail.ejs</code> 文件，确保（大概在 74 行）有如下代码（如果缺少就补上）：</p><pre class="line-numbers language-ejs" data-language="ejs"><div class="caption"><span>post-detail.ejs</span></div><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>prismjs <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>prismjs<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>\t<span class="token comment">&lt;!-- 是否加载使用自带的 prismjs. --></span>\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>css<span class="token punctuation">.</span>prism<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>js<span class="token punctuation">.</span>prism<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文章-2">参考文章</h2><p><a href="https://hexo.io/zh-cn/docs/syntax-highlight.html#PrismJS">代码高亮|Hexo</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo-Matery </tag>
            
            <tag> 代码块高亮 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客添加 Live2D | Hexo-Matery</title>
      <link href="/2022/03/30/bo-ke-tian-jia-live2d-hexo-matery/"/>
      <url>/2022/03/30/bo-ke-tian-jia-live2d-hexo-matery/</url>
      
        <content type="html"><![CDATA[<p>有谁会拒绝可爱的板娘入驻自己的博客呢？反正我不会吧o(^▽^)o</p><p>这几天琢磨了一下，成就感满满，写个随笔记录一下！</p><blockquote><p>我的博客主题模板的是 hexo-theme-martery</p></blockquote><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-03-30_20-58-57.jpg" alt=""></p><h2 id="安装">安装</h2><hr><h3 id="安装模块：">安装模块：</h3><p><code>npm install --save hexo-helper-live2d</code></p><h3 id="live2d-widget">live2d-widget:</h3><ol><li><p><a href="https://github.com/xiazeyu/live2d-widget.js/releases">下载最新版</a>,解压到博客根目录；</p></li><li><p>自定义模型：</p><ol><li>在博客 <strong>根目录</strong> 中创建一个 <strong>live2d_models</strong> 文件夹；</li><li>给模型创建一个专属文件夹；</li><li>将模型文件复制到此文件夹。</li></ol></li></ol><p><strong>注意！模型的 json 文件路径必须为</strong><code>/live2d_models/&#123;name&#125;/&#123;name&#125;.model.json</code></p><pre class="line-numbers language-fileTree" data-language="fileTree"><div class="caption"><span>模拟文件路径（仅供参考）</span></div><code class="language-fileTree">根目录 | +-----live2d-widget.js-3.0.6 || |+----- ... | +-----live2d_models || |+-----&#123;name&#125; ||| ||       +-----&#123;name&#125;.moc ||| ||+-----&#123;name&#125;.model.json ||| ||+----- ... || |+-----&#123;name-another&#125; ||| ||+----- ... || |+-----&#123;name-another&#125; || |+----- ... |  +-----_config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置">配置</h2><hr><p>向 HEXO 的 <code>_config.yml</code> 文件或 主题(hexo-theme-martery)的 <code>_config.yml</code> 文件中添加如下配置信息：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># live2d 相关配置 - SeaYJ</span><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否开启 live2d</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local <span class="token comment"># 默认</span>  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/ <span class="token comment"># &lt;不需要改动>插件在站点上的根目录(相对路径)</span>  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/ <span class="token comment"># &lt;不需要改动>脚本文件相对与插件根目录路径</span>  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/ <span class="token comment"># &lt;不需要改动>模型文件相对与插件根目录路径</span>  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span>  <span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 调试, 是否在控制台输出日志</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>modelName<span class="token punctuation">&#125;</span> <span class="token comment"># &lt;注意：&#123;modelName&#125; 就是之前那个 &#123;name&#125; 文件夹的名字>模型文件名</span>    <span class="token key atrule">scale</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 模型与canvas的缩放，默认为 1</span>    <span class="token key atrule">hHeadPos</span><span class="token punctuation">:</span> <span class="token number">0.5</span> <span class="token comment"># &lt;似乎没什么用>模型相对于 canvas 的水平位置</span>    <span class="token key atrule">vHeadPos</span><span class="token punctuation">:</span> <span class="token number">0.618</span> <span class="token comment"># &lt;似乎没什么用>模型相对于 canvas 的竖直位置</span>  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">superSample</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># &lt;似乎没什么用>超采样等级,默认为 2</span>    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">150</span> <span class="token comment"># &lt;可以直接理解为你想显示 live2d 为多宽>canvas的长度，默认为 150</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">300</span> <span class="token comment"># &lt;可以直接理解为你想显示 live2d 为多高>canvas的高度，默认为 300</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> left <span class="token comment"># 模型显示位置：right(默认) 或 left</span>    <span class="token key atrule">hOffset</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># &lt;+值代表向上>canvas水平偏移，默认为 0</span>    <span class="token key atrule">vOffset</span><span class="token punctuation">:</span> <span class="token number">16</span> <span class="token comment"># &lt;+值代表向 position 设置的方向>canvas垂直偏移，默认为 -20</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否在手机上显示，默认为 true</span>    <span class="token key atrule">scale</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 手机上的缩放倍数，默认为 0.5</span>  <span class="token key atrule">react</span><span class="token punctuation">:</span>    <span class="token key atrule">opacityDefault</span><span class="token punctuation">:</span> <span class="token number">0.7</span> <span class="token comment"># 模型透明度，默认为 0.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型">模型</h2><hr><h3 id="使用模型">使用模型</h3><p>在 <code>_config.yml</code> 文件的 <code>live2d.model.use</code> 属性中引用模型可以有以下四种方法：</p><p>a. 通过 live2d_models 子目录名称调用</p><p>在前面的<strong>模拟路径</strong>中就是 <code>&#123;name&#125;</code> 或 <code>&#123;name-another&#125;</code> 。</p><p>b. 通过 <strong>相对于根目录的文件夹路径</strong> 调用</p><p>在前面的<strong>模拟路径</strong>中就是 <code>./live2d_models/&#123;name&#125;</code> 或 <code>./live2d_models/&#123;name-another&#125;</code> 。</p><p>c. 使用 npm 现有模型</p><p>通过 <code>npm install 模型名称</code> 来安装 npm 现有模型，然后直接在  <code>live2d.model.use</code> 中直接写 <code>模型名称</code></p><p><strong>可选择的模型有：</strong></p><ul><li>live2d-widget-model-chitose</li><li>live2d-widget-model-epsilon2_1</li><li>live2d-widget-model-gf</li><li>live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</li><li>live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</li><li>live2d-widget-model-haruto</li><li>live2d-widget-model-hibiki</li><li>live2d-widget-model-hijiki</li><li>live2d-widget-model-izumi</li><li>live2d-widget-model-koharu</li><li>live2d-widget-model-miku</li><li>live2d-widget-model-ni-j</li><li>live2d-widget-model-nico</li><li>live2d-widget-model-nietzsche</li><li>live2d-widget-model-nipsilon</li><li>live2d-widget-model-nito</li><li>live2d-widget-model-shizuku</li><li>live2d-widget-model-tororo</li><li>live2d-widget-model-tsumiki</li><li>live2d-widget-model-unitychan</li><li>live2d-widget-model-wanko</li><li>live2d-widget-model-z16</li></ul><p>d. 通过 <strong>网络地址</strong> 引用</p><p>直接填写 <code>&#123;name&#125;.model.json</code> 的网络地址即可！</p><p>例如：<a href="https://unpkg.com/live2dapi@1.0.0/miku/miku.model.json">https://unpkg.com/live2dapi@1.0.0/miku/miku.model.json</a></p><h3 id="发布模型">发布模型</h3><ol><li><p>新建一个目录, 用你的Node环境执行 <code>npm init</code>, 推荐您使用 <code>live2d-widget-model-&#123;name&#125;</code> 的包名；</p></li><li><p>在刚刚创建的目录下创建 <code>assets</code> 子目录, 把你的模型放进去；</p></li><li><p>使用 <code>npm publish</code> 来发布。然后别人就可以使用 <code>npm install --save live2d-widget-model-&#123;name&#125;</code> 来安装，并且通过向 <code>live2d.model.use</code> 键入包名 <code>(live2d-widget-model-&#123;name&#125;)</code> 来使用了.</p></li></ol><h2 id="有趣的-BUG">有趣的 BUG</h2><p>我发现我的这篇博客不知道为什么有时候会出现 Live2D 显示问题，报了个错：<br><img src="https://seayj.cn/medias/lazyload.gif" data-original="./Snipaste_2022-03-31_14-37-02.jpg" alt=""></p><p>我也不明白，希望大佬能教教我！</p><h2 id="参考文章">参考文章</h2><p><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">hexo-helper-live2d</a><br><a href="https://l2dwidget.js.org/docs/index.html">live2d-widget.js</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo-Matery </tag>
            
            <tag> Live2D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Win32 系统控件都是老式的问题</title>
      <link href="/2022/03/29/jie-jue-win32-xi-tong-kong-jian-du-shi-lao-shi-de-wen-ti/"/>
      <url>/2022/03/29/jie-jue-win32-xi-tong-kong-jian-du-shi-lao-shi-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>在 Win32 编程时我们时常会遇到使用系统窗口类的情况。按理说我们使用的系统窗口类样式应该与我们正在使用的操作系统版本保持一致才是，但为什么往往都是老式的控件呢？</p><p>其实解决办法很简单！</p><p>将下列代码加入头文件顶部即可：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_UNICODE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">defined _M_IX86</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>linker<span class="token punctuation">,</span></span><span class="token string">"/manifestdependency:\"type='win32' name='Microsoft.Windows.Common-Controls' version='6.0.0.0' processorArchitecture='x86' publicKeyToken='6595b64144ccf1df' language='*'\""</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">defined _M_X64</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>linker<span class="token punctuation">,</span></span><span class="token string">"/manifestdependency:\"type='win32' name='Microsoft.Windows.Common-Controls' version='6.0.0.0' processorArchitecture='amd64' publicKeyToken='6595b64144ccf1df' language='*'\""</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>linker<span class="token punctuation">,</span></span><span class="token string">"/manifestdependency:\"type='win32' name='Microsoft.Windows.Common-Controls' version='6.0.0.0' processorArchitecture='*' publicKeyToken='6595b64144ccf1df' language='*'\""</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 简单来说，你看到的大部分 Win32 窗口方框都是由公共控件库（Common Control Library） Comctl32.dll 实现的窗口。要使应用程序能够显示出与操作系统版本匹配的视觉样式，必须使用<strong>ComCtl32.dll 版本 6.0 或更高版本</strong>；但在没有任何定义的默认情况下，应用程序使用 User32.dll 中定义的用户控件（User Controls）和 <strong>ComCtl32.dll 版本 5.0</strong> 中定义的公共控件（Common Controls）。如果要求指定应用程序使用 <strong>ComCtl32.dll 版本 6.0 或更高</strong>，则必须添加应用程序清单（manifest，如其他答主所述）或编译器指令（#pragma）使得使应用程序能够指定它需要的程序集（Assembly，一组由不同版本 dll 组成的对象列表）版本。</p><p>具体可参考官方文档 <a href="https://docs.microsoft.com/en-us/windows/win32/controls/cookbook-overview">Enabling Visual Styles</a></p><p> <strong>ComCtl32.dll 版本 6.0</strong> 不可再发行（redistributable），也就是说只有当应用程序在对应的 Windows 版本上运行时，这些对应的样式效果可用，也就是说你不能在 Windows 11 上编译程序之后拿到 Windows XP 上运行，要求其用这种方法显示 Windows 11 的效果。关于不同操作系统内置的对应版本：[2]</p><table><thead><tr><th style="text-align:center"><strong>Version</strong></th><th style="text-align:left"><strong>Distribution Platform</strong></th></tr></thead><tbody><tr><td style="text-align:center">5.81</td><td style="text-align:left">Microsoft Internet Explorer 5.01</br>Microsoft Internet Explorer 5.5</br>Microsoft Internet Explorer 6</td></tr><tr><td style="text-align:center">5.82</td><td style="text-align:left">Windows Server 2003</br>Windows Vista</br>Windows Server 2008</br>Windows 7</td></tr><tr><td style="text-align:center">6.0</td><td style="text-align:left">Windows Server 2003</td></tr><tr><td style="text-align:center">6.10</td><td style="text-align:left">Windows Vista</br>Windows Server 2008</br>Windows 7</td></tr></tbody></table><h3 id="声明">声明</h3><p>原文链接：<a href="https://www.zhihu.com/question/489914730">https://www.zhihu.com/question/489914730</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Win32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>控制台程序运行时不显示 CMD 窗口</title>
      <link href="/2022/03/29/kong-zhi-tai-cheng-xu-yun-xing-shi-bu-xian-shi-cmd-chuang-kou/"/>
      <url>/2022/03/29/kong-zhi-tai-cheng-xu-yun-xing-shi-bu-xian-shi-cmd-chuang-kou/</url>
      
        <content type="html"><![CDATA[<p>我们知道，控制台应用程序本身是没有窗口的。系统为了让我们能看到程序执行的结果，会在程序执行时借一个命令提示符窗口(CMD 窗口)。所以，就有了这个黑黑的窗口…</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20220108165410630-278740407.jpg" alt=""></p><p>有时候我们又不想让这个窗口显示出来，那么我们该怎么做呢？</p><p>我总结了以下几种方法：</p><h2 id="方法一-2">方法一</h2><hr><p>在头文件的后面加上一行代码：</p><p><code>#pragma comment( linker, &quot;/subsystem:\&quot;windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot; )</code></p><p><strong>原理解释：</strong><br>一、subsystem 和可执行文件的启动<br>LINK 的时候需要指定 /subsystem，这个链接选项告诉 Windows 如何运行可执行文件。<br>我们知道用 VC 编写的程序,运行的时候是需要 C/C++ 运行库支持的。<br>当我们运行一个 C/C++ 程序的时候，链接器会首先寻找应用程序的启动函数,例如:<br>如果你建立了一个 console 程序的话，编译器得链接开关会是以下这种形式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">/</span>subsystem<span class="token operator">:</span><span class="token string">"console"</span> <span class="token operator">/</span>entry<span class="token operator">:</span><span class="token string">"mainCRTStartup"</span> <span class="token punctuation">(</span>ANSI<span class="token punctuation">)</span><span class="token operator">/</span>subsystem<span class="token operator">:</span><span class="token string">"console"</span> <span class="token operator">/</span>entry<span class="token operator">:</span><span class="token string">"wmainCRTStartuup"</span> <span class="token punctuation">(</span>UNICODE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将 subsystem 选成&quot;console&quot;后，Windows在进入可执行文件的代码前（如mainCRTStartup），就会产生一个控制台窗口。之后mainCRTStartup 或 wmainCRTStartuup 会调用main或wmain。<br>如果你建立了一个win32 application,编译器得链接开关则会是一下形式</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">/</span>subsystem<span class="token operator">:</span><span class="token string">"windows"</span> <span class="token operator">/</span>entry<span class="token operator">:</span><span class="token string">"WinMainCRTStartup"</span> <span class="token punctuation">(</span>ANSI<span class="token punctuation">)</span><span class="token operator">/</span>sbusystem<span class="token operator">:</span><span class="token string">"windows"</span> <span class="token operator">/</span>entry<span class="token operator">:</span><span class="token string">"wWinMainCRTStartup"</span> <span class="token punctuation">(</span>UINCODE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将 subsystem 选成&quot;console&quot;后，操作系统就不产生console窗口,该类型应用程序的窗口由用户自己创建。WinMainCRTStartup 或 wWinMainCRTStartup 会调用 WinMain 或 wWinMain。<br>值得一提的是，在进入应用程序的Entry Point前，Windows的装载器已经做过C变量的初始化，有初值的全局变量拥有了它们的初值，没有初值的变量被设为0。</p><h2 id="方法二-2">方法二</h2><hr><p>利用 VBS 脚本启动程序：</p><pre class="line-numbers language-vbs" data-language="vbs"><code class="language-vbs">set objShell&#x3D;wscript.createObject(&quot;wscript.shell&quot;)iReturn&#x3D;objShell.Run(&quot;你的程序.exe&quot;, 0, FALSE) &#39;Run()&#39;第一个参数是你要执行的程序的路径， &#39;第二个参数是窗口的形式，0后台运行；1正常运行；2最小化；3最大化；缺省的话表示正常运行 &#39;第三个参数是表示这个脚本是等待还是继续执行，如果设为了True,脚本就会等待调用的程序退出后再向后执行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法三">方法三</h2><hr><p>通过其他程序来调用需要隐藏窗口的程序（完全隐藏）：<br><code>WinExec(&quot;需要隐藏窗口的程序&quot;,SW_HIDE);    //隐藏执行其他程序</code></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Console Application </tag>
            
            <tag> Win32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Win32】 UAC用户账户控制 (提权)</title>
      <link href="/2022/03/29/win32-uac-yong-hu-zhang-hu-kong-zhi-ti-quan/"/>
      <url>/2022/03/29/win32-uac-yong-hu-zhang-hu-kong-zhi-ti-quan/</url>
      
        <content type="html"><![CDATA[<p>最近写程序时遇到一个问题，就是当一个程序需要管理员权限才能正常运行该怎么办？</p><p>通过查阅多方资料，我总结出来几个比较实用的办法！(每种办法实现方法不同，同时功能上也有一些小小的差异。)</p><h2 id="方法一-批处理脚本">方法一(批处理脚本)</h2><hr><pre class="line-numbers language-batch" data-language="batch"><code class="language-batch"><span class="token operator">@</span><span class="token command"><span class="token keyword">echo</span> off</span><span class="token command"><span class="token keyword">if</span> <span class="token keyword">exist</span> <span class="token string">"%SystemRoot%\SysWOW64"</span></span> <span class="token command"><span class="token keyword">path</span> <span class="token variable">%path%</span>;<span class="token variable">%windir%</span>\SysNative;<span class="token variable">%SystemRoot%</span>\SysWOW64;<span class="token variable">%~dp0</span></span><span class="token command"><span class="token keyword">bcdedit</span> >nul</span><span class="token command"><span class="token keyword">if</span> '%<span class="token keyword">errorlevel</span>%' <span class="token operator">NEQ</span> '<span class="token number">0</span>'</span> <span class="token punctuation">(</span><span class="token command"><span class="token keyword">goto</span> UACPrompt</span><span class="token punctuation">)</span> <span class="token command"><span class="token keyword">else</span></span> <span class="token punctuation">(</span><span class="token command"><span class="token keyword">goto</span> UACAdmin</span><span class="token punctuation">)</span><span class="token label property">:UACPrompt</span>%1 start "" mshta vbscript:createobject<span class="token punctuation">(</span>"shell.application"<span class="token punctuation">)</span>.shellexecute<span class="token punctuation">(</span>"""%~0""","::",,"runas",1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token command"><span class="token keyword">window</span>.close</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token command"><span class="token keyword">exit</span></span><span class="token command"><span class="token keyword">exit</span> <span class="token parameter attr-name">/B</span></span><span class="token label property">:UACAdmin</span><span class="token command"><span class="token keyword">cd</span> <span class="token parameter attr-name">/d</span> <span class="token string">"%~dp0"</span></span>;你的代码写在这里，你可以在在这里启动你的程序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个批处理脚本代码可以以管理员身份启动，并且会以文件所在位置为工作环境。</p><p>所以，只要用这个脚本启动你的程序即可以管理员身份启动你的程序。</p><p><strong>缺点：</strong></p><ol><li>会有一个命令提示符窗口一闪而过；</li><li>程序启动入口是个批处理文件。</li></ol><h2 id="方法二-manifest">方法二(manifest)</h2><hr><p>在 VS 编辑器里这样设置项目属性后再编译出来的程序就会有个 UAC 盾，以后你的程序只要运行就都会请示管理员权限。</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20220108153151471-1065014989.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20220108153023432-731459435.jpg" alt=""></p><h2 id="方法三-动态提权">方法三(动态提权)</h2><hr><p>所谓动态提权，就是一个没有管理员权限的程序进程在他认为合适的时候创建一个有管理员权限的程序进程，代码很简单：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">HINSTANCE <span class="token function">ShellExecuteA</span><span class="token punctuation">(</span>  <span class="token punctuation">[</span>in<span class="token punctuation">,</span> optional<span class="token punctuation">]</span> HWND   hwnd<span class="token punctuation">,</span>            <span class="token comment">// 父窗口的句柄，用于显示 UI 或错误消息。如果操作未与窗口关联，则此值可以为NULL。</span>  <span class="token string">"runas"</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>in<span class="token punctuation">]</span>           LPCSTR lpFile<span class="token punctuation">,</span>          <span class="token comment">// 你的程序路径</span>  <span class="token punctuation">[</span>in<span class="token punctuation">,</span> optional<span class="token punctuation">]</span> LPCSTR lpParameters<span class="token punctuation">,</span>    <span class="token comment">// 需要传递的参数</span>  <span class="token punctuation">[</span>in<span class="token punctuation">,</span> optional<span class="token punctuation">]</span> LPCSTR lpDirectory<span class="token punctuation">,</span>     <span class="token comment">// 默认（工作）目录。如果此值为 NULL，则使用当前工作目录。如果在 lpFile 中提供了相对路径，则不要对 lpDirectory 使用相对路径。</span>  <span class="token punctuation">[</span>in<span class="token punctuation">]</span>           INT    nShowCmd         <span class="token comment">// 指定应用程序在打开时如何显示</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 INT nShowCmd 参数具体可参考 <a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow">Microsoft Docs - ShowWindow function</a>，</p><p>具体函数详情参考 <a href="https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecutea">Microsoft Docs - ShellExecuteA function</a>。</p><h2 id="方法四-利用微软-Windows-的漏洞">方法四(利用微软 Windows 的漏洞)</h2><hr><p>这些方法因为不推荐使用，所以不多介绍了。有 Windows UAC 漏洞，但是微软会想办法去修补的，所以这类方法容易失效。</p><h2 id="补充资料">补充资料</h2><hr><blockquote><p>基本概念：</p><p>1。进程的权限是继承的，也就是说，有管理员权限的程序创建的进程也有管理员权限，没有管理员权限的程序创建进程就没有管理员权限（但高权限进程创建进程必须是高权限不是绝对的）</p><p>2。Windows Shell进程explorer本身没有管理员权限，如果explorer有管理员权限，大家可以想一下，那么它创建的进程都有管理员权限，那UAC不就形同虚设了吗</p><p>3。没有权限的进程不能创建有权限的进程！是的，你没有听错，就是不能，这是Windows操作系统规定的。但你可能会问“那么如何提权？你不是说连explorer都没有权限吗？”，答案是：Windows系统中有一个开机自启的AppInfo服务，它直接以系统权限运行，在一个管理员用户登录时，系统会保留一份当前用户的高权限令牌并传给AppInfo服务，提权的过程本身就是一个进程通过进程通信把要提权的程序传给AppInfo服务，AppInfo服务会运行一个UI进程，UI进程会接收用户响应，如果用户同意这次提权，AppInfo服务就使用高权限令牌在当前用户会话的交互窗口站的当前桌面创建管理员权限的进程，创建时将进程的父进程替换为请求提权的进程。这样我们看起来就好像是“没权限进程创建有权限进程”了，其实高权限进程不是它创建的。</p></blockquote><h2 id="参考文档">参考文档</h2><hr><p><a href="https://blog.csdn.net/CSDN_C2/article/details/108408158">让bat批处理以管理员权限运行的实现方法</a><br><a href="https://blog.csdn.net/zuishikonghuan/article/details/46965159">[Win32] UAC用户账户控制（提权+降权）</a><br><a href="https://docs.microsoft.com/zh-cn/">Microsoft 技术文档</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Win32 </tag>
            
            <tag> UAC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio 设置背景图片主题（所有版本设置方法）</title>
      <link href="/2022/03/29/visual-studio-she-zhi-bei-jing-tu-pian-zhu-ti-suo-you-ban-ben-she-zhi-fang-fa/"/>
      <url>/2022/03/29/visual-studio-she-zhi-bei-jing-tu-pian-zhu-ti-suo-you-ban-ben-she-zhi-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>你知道吗？Visual Studio 编辑器也能设置背景哦~</p><p>效果预览：</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226102206472-1095159371.jpg" alt=""></p><h2 id="目录">目录</h2><hr><ol><li><a href="#step1">扩展安装</a></li><li><a href="#step2">图片背景设置</a></li><li><a href="#step3">主题透明并扩展到 IDE</a></li></ol><h2 id="内容">内容</h2><hr><h3 id="step1">扩展安装</h3><h4 id="ClaudiaIDE-扩展下载">ClaudiaIDE 扩展下载</h4><p>我们打开VS的扩展安装界面：【扩展】-&gt;【管理扩展】-&gt;【联机】，输入 “ClaudiaIDE”，可以看到搜索结果：“ClaudiaIDE”。如果你是 Visual Studio 2022 用户，强烈建议不要用最新版（当前时间为2021.12.26日，我发现这个当前最新版3.0.5有个bug）。你可以进入 ClaudiaIDE 的 GitHub 官网选择旧版，但是只支持 3.0.1+ 版本，所以还是要注意(具体的官网也有说明，记得仔细阅读)。<br><a href="https://github.com/buchizo/ClaudiaIDE/releases">ClaudiaIDE GitHub 历代版本下载传送门</a></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226093730373-223597750.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226093427376-1359247982.jpg" alt=""></p><h4 id="主题背景编辑扩展下载">主题背景编辑扩展下载</h4><h5 id="Visual-Studio-2022">Visual Studio 2022</h5><p>我们打开VS的扩展安装界面：【扩展】-&gt;【管理扩展】-&gt;【联机】，输入 “Visual Studio Color Theme Designer 2022”，可以看到搜索结果：“Visual Studio Color Theme Designer 2022”。</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226093817971-1463883804.jpg" alt=""></p><h5 id="Visual-Studio-2019-及旧版本">Visual Studio 2019 及旧版本</h5><p>我们打开VS的扩展安装界面：【工具】-&gt;【扩展和更新】-&gt;【联机】，输入 “Color Theme Editor for Visual Studio 2019”(2019对于自己的版本号)，可以看到搜索结果：“Color Theme Editor for Visual Studio 2019”。具体其他操作可以参考这篇博客：<a href="https://www.cnblogs.com/stulzq/p/9393323.html">Visual Studio 2017 设置透明背景图</a>。</p><p>因为操作方法略有小差异，我就只以 VS2022 版本为实例进行演示操作，旧版参考其他博客即可。</p><h3 id="step2">图片背景设置</h3><p>我们打开VS：【工具】-&gt;【选项】-&gt;【ClaudiaIDE】。</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226094940666-684800660.jpg" alt=""></p><p>然后添加自己的图片，按照我这个配置即可：</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226095114210-1939152974.jpg" alt=""></p><h3 id="step3">主题透明并扩展到 IDE</h3><h3 id="step3-1">操作流程</h3><p>我们重新启动 VS2022 ，然后新建一个项目（中途遇到问题请<a href="#step3-2">点击此处跳转</a>）：</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226095313186-425493518.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226095323670-1937743407.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226095341453-1778583874.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226095405831-1649223623.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226095420829-38330897.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226095442059-1263447836.jpg" alt=""></p><p>根据下面的列表，修改指定控件的指定属性值为 <code>2A252526</code>:<br>(VS2022 有部分是两个属性，只要修改颜色最深的那个就行了！不然会有问题，不信你试试awa)</p><p>TreeView -&gt; Background</p><p>Environment -&gt; Window</p><p>Environment -&gt; EnvironmentBackground</p><p>Environment -&gt; EnvironmentBackgroundGradientBegin<br>Environment -&gt; EnvironmentBackgroundGradientEnd<br>Environment -&gt; EnvironmentBackgroundGradientMiddle1<br>Environment -&gt; EnvironmentBackgroundGradientMiddle2</p><p>Environment -&gt; MainWindowActiveCaption</p><p>Environment -&gt; MainWindowInactiveCaption</p><p>Environment -&gt; CommandShelfBackgroundGradientBegin<br>Environment -&gt; CommandShelfBackgroundGradientEnd<br>Environment -&gt; CommandShelfBackgroundGradientMiddle</p><p>Environment -&gt; CommandShelfHighlightGradientBegin<br>Environment -&gt; CommandShelfHighlightGradientEnd<br>Environment -&gt; CommandShelfHighlightGradientMiddle</p><p>Environment -&gt; CommandBarGradientBegin<br>Environment -&gt; CommandBarGradientEnd<br>Environment -&gt; CommandBarGradientMiddle</p><p>Environment -&gt; CommandBarToolBarBorder</p><p><strong>注意这三个选项，只改颜色最深的那个</strong>：<br><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226095851621-1598812548.jpg" alt=""><br><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226095935682-2046765014.jpg" alt=""><br><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226095957457-1961508691.jpg" alt=""></p><h3 id="step3-2">问题说明</h3><p>遇到这个问题的话可以看下面的操作</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226100651552-908751673.jpg" alt=""></p><p><strong>操作</strong>：<br>打开 Visual Studio Installer ，然后选择【修改】，勾选对应的【.NET Framework 4.7.2 目标包】，最后【修改】即可。</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226100913956-983609967.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226100938372-1036421929.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226101017490-2084371103.jpg" alt=""></p><p><a href="#step3-1">点我返回【操作流程】</a></p><h4 id="应用">应用</h4><p>修改好了后直接点击【应用】就可以看到透明背景主题了awa…</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211226102041470-451541752.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美化体验 </tag>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 如何在当前位置打开 CMD 命令窗口？</title>
      <link href="/2022/03/29/windows-10-ru-he-zai-dang-qian-wei-zhi-da-kai-cmd-ming-ling-chuang-kou/"/>
      <url>/2022/03/29/windows-10-ru-he-zai-dang-qian-wei-zhi-da-kai-cmd-ming-ling-chuang-kou/</url>
      
        <content type="html"><![CDATA[<p>打开 CMD 后还要 CD 配置运行环境？太麻烦了！</p><p>来看看我是怎么在当前位置一键打开 CMD 命令窗口的吧！</p><h2 id="方法一">方法一</h2><ol><li>Win + R 键召唤出运行窗口，然后输入 “CMD” 打开命令提示符。</li><li>使用 cd 命令更改当前命令提示符的工作环境。</li></ol><pre class="line-numbers language-Batch" data-language="Batch"><code class="language-Batch">cd&#x2F;              - 退到当前所在盘符cd..             - 返回上一目录cd &quot;FilesPath&quot;   - 进入 FilesPath 目录D:               - 进入 D: 盘（其他盘符类似）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法二">方法二</h2><ol><li>直接在文件资源管理器的某个目录下的地址栏中输入 “cmd”。</li><li>回车，就可以直接打开 cmd 并且在该目录下工作。</li></ol><h2 id="方法三-一劳永逸-注册表">方法三(一劳永逸/注册表)</h2><p>提醒：虽然涉及到注册表，但是操作非常简单。不需要备份。<br>你备份了也没有用，重新导入备份的注册表无法删除你新建的注册表。<br>不过，你要是担心，可以备份一下！</p><ol><li>Win + R 打开运行窗口，输入 “regedit” 打开注册表编辑器。</li><li>打开 “计算机\HKEY_CLASSES_ROOT\Directory\Background\shell\”。</li><li>然后右键新建一个 “项”，名字叫 <code>OpenCMDHere</code> 。</li><li>接着在 OpenCMDHere 项下新建一个项叫 <code>command</code>。</li><li>再接着将 OpenCMDHere 项中的默认值的数据改成 <code>在当前目录启动 CMD</code>（这个名字就是你右键时将看到的名字）。</li><li>最后将 OpenCMDHere 项下的 command 项中的默认值的数据改成 <code>cmd.exe /s /k pushd &quot;%V&quot;</code>。</li></ol><p>重新启动一下 Windows资源管理器 或者 重新启动一下电脑 就行了。<br>以后，你就会发现你的右键菜单多了一项 在当前目录启动 CMD 。<br>点击该项即可在右键位置目录打开 命令提示符 了，就和打开 Powershell 一样，可谓一劳永逸。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VC 2010 Express 学生版(中文版)</title>
      <link href="/2022/03/29/vc-2010-express-xue-sheng-ban-zhong-wen-ban/"/>
      <url>/2022/03/29/vc-2010-express-xue-sheng-ban-zhong-wen-ban/</url>
      
        <content type="html"><![CDATA[<p>Microsoft Visual C++ 2010 Express 虽然微软已经不再提供下载，但是很多时候教学还是要用…</p><p>无语…找了半天终于找到了中文版的。这里挂个链接，分享给大家！<br>希望能帮到大家！</p><h2 id="Microsoft-Visual-C-2010-Express-学生版">Microsoft Visual C++ 2010 Express 学生版</h2><p><a href="https://pan.baidu.com/s/1q9rfbN-114zaDBPxZUeqUQ">下载传送门(提取码:r7sm)</a></p><h2 id="如何安装">如何安装</h2><ol><li><p>拿到压缩文件后，解压到桌面(别怕，安装完后这个文件夹是可以删除的)。</p></li><li><p>在 <strong>“.\vc2010express\VCExpress2010\”</strong> 文件夹中找到 <strong>steup.exe</strong> 文件。然后右键，选择 <strong>“打开”</strong> 。</p></li><li><p>配置好安装路径后(想配置安装路径就自己配置，不会的或者不想的就默认就行了^-^)一路下一步就好了。</p></li><li><p>(*)可能有人安装后桌面找不到桌面图标，从而不知道怎么打开 VC 2010 。别急，方法我放在图里了，大家自己看就行了！</p></li></ol><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211023221044090-485750094.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211023221149424-1971937898.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211023221316953-1394538470.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211023221506887-1825171777.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211023221632636-1958762448.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual C++ </tag>
            
            <tag> 资源分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑重装系统后要做的那些事</title>
      <link href="/2022/03/29/dian-nao-chong-zhuang-xi-tong-hou-yao-zuo-de-na-xie-shi/"/>
      <url>/2022/03/29/dian-nao-chong-zhuang-xi-tong-hou-yao-zuo-de-na-xie-shi/</url>
      
        <content type="html"><![CDATA[<p>花了点时间整理了一下重装系统后要做的事。</p><p>这些都是按照我个人喜好设置的，大家可以自行选取操作！</p><h2 id="大纲">大纲</h2><ol><li><a href="#step1">系统相关</a><ul><li><a href="#step1-1">更改桌面图标</a></li><li><a href="#step1-2">更改新内容存储的位置</a></li><li><a href="#step1-3">更改“视频”、“图片”、“文档”等的保存位置</a></li></ul></li><li><a href="#step2">软件相关</a><ul><li><a href="#step2-1">安全软件</a></li><li><a href="#step2-2">浏览器</a></li><li><a href="#step2-3">解压软件</a></li><li><a href="#step2-4">Office系列办公软件</a></li><li><a href="#step2-5">Notepad++</a></li></ul></li><li><a href="#step3">优化相关</a><ul><li><a href="#step3-1">电脑鼠标指针</a></li><li><a href="#step3-2">电脑壁纸</a></li></ul></li></ol><h2 id="简略操作解释">简略操作解释</h2><h3 id="step1">系统相关</h3><h4 id="step1-1">1. 更改桌面图标</h4><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211020064929758-546120728.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211020065011223-2063110694.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211020065045358-430429568.jpg" alt=""></p><h4 id="step1-2">2. 更改新内容存储的位置</h4><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211020065211274-1200984641.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211020065249931-1359983939.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211020065357887-1413384634.jpg" alt=""></p><h4 id="step1-3">3. 更改“视频”、“图片”、“文档”等的保存位置</h4><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211020065841756-302612061.jpg" alt=""></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211020070223294-1497201277.jpg" alt=""></p><p><strong>注释：这里我是根据 “2. 更改新内容存储的位置” 里的操作进行选择位置的！</strong></p><p><strong>例如</strong>：我在 “2. 更改新内容存储的位置” 操作中，将视频默认更改到了<strong>D盘</strong>。</p><p>那么在路径 <strong>“D:\电脑用户名\”</strong> 中就会有一个默认的 “Videos” 文件夹(其中文名为“视频”)！</p><p><strong>将新位置定在这里会更加有条理一些！</strong></p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211020070404784-1708735807.jpg" alt=""></p><h3 id="step2">软件相关</h3><p>注意：我这里使用的软件都是我自己喜欢的！</p><p>大家也可以按照自己的意愿自行替换相应的软件！</p><h4 id="step2-1">1. 安全软件</h4><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211020175910587-244774172.jpg" alt=""></p><p>安全软件我一直以来用的就是 “<strong><a href="https://www.huorong.cn/">火绒</a></strong>” ，这里是描述我的配置方案。</p><p>至于为什么选 <a href="https://www.huorong.cn/">火绒</a> 我就不做过多的赘述了！</p><p>大家可以自行百度 <a href="https://www.huorong.cn/">火绒</a> 作为安全软件的优缺点！</p><h4 id="step2-2">2. 浏览器</h4><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211020180046902-2006605773.jpg" alt=""></p><p>之前我的浏览器一直是标配的 “<a href="https://www.google.cn/chrome/index.html">Chrome</a>” ，但由于 <a href="https://www.google.cn/chrome/index.html">Chrome</a> 隶属于 Google 公司，导致有些功能在国内很难使用！</p><p>外加上 Microsoft 推出<a href="https://www.microsoft.com/zh-cn/edge#platform"><strong>最新版EDGE</strong></a>后，我就果断选择了<a href="https://www.microsoft.com/zh-cn/edge#platform"><strong>最新版EDGE</strong></a>。</p><p>大家可以自行了解相关信息，我不做过多赘述！</p><h4 id="step2-3">3. 解压软件</h4><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211020180120639-1409023001.jpg" alt=""></p><p><a href="https://pan.baidu.com/s/1aEB59J4OGgfujATOa5aJng">WinRAR</a> (提取码:a5rw)虽然有广告，但是我已经做好破解版了！</p><p>大家可以按照操作说明进行操作，使用我的破解版 <a href="https://pan.baidu.com/s/1aEB59J4OGgfujATOa5aJng">WinRAR</a> 。</p><h4 id="step2-4">4. Office系列办公软件</h4><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211020180217427-1890024410.jpg" alt=""></p><p>我使用的是 <a href="https://otp.landian.vip/zh-cn/">Office_Tool_Pro</a> 来配置我需要的 Office！</p><p>软件官网和程序内部均有详细说明，我这里也不过多介绍了！</p><h4 id="step2-5">5. Notepad++</h4><p>一个小巧实用的编辑软件还是很有必要的，特别是针对我这种经常需要在各大编程语言的来回变换的苦逼孩子TOT~</p><p>所以，我选择了 <a href="https://pan.baidu.com/s/1z17dS3biGv5fk_LdL_f2dg/">Notepad++</a> (提取码:mxd3) !</p><p>有兴趣的可以自己去了解 <a href="https://pan.baidu.com/s/1z17dS3biGv5fk_LdL_f2dg/">Notepad++</a> 的强大之处！</p><h3 id="step3">优化相关</h3><h4 id="step3-1">电脑鼠标指针</h4><p>这个我一直用的是 <a href="https://pan.baidu.com/s/16rTA9aIEKm5I6YtS7n6NrQ">Helltaker Stroke Version</a> (提取码:davh)!</p><p><img src="https://seayj.cn/medias/lazyload.gif" data-original="./2573290-20211020175737852-883422927.jpg" alt=""></p><p>声明：这个鼠标指针原作者不是我！</p><p>我只是把鼠标指针的安装模块和对应指针的名称进行了修改，使得其看起来更专业一些！</p><p>强迫症~<br>哈哈哈哈~<br>见谅~</p><p><a href="https://pan.baidu.com/s/16rTA9aIEKm5I6YtS7n6NrQ?pwd=davh">其它鼠标指针</a></p><h4 id="step3-2">电脑壁纸</h4><p>电脑壁纸也是电脑美观的一大亮点！</p><p>当然，找壁纸大家都是有能力的！我就不献丑了~</p><p>嘻嘻(●’◡’●)~</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美化体验 </tag>
            
            <tag> 重装系统 </tag>
            
            <tag> 系统优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝剑锋从磨砺出，梅花香自苦寒来</title>
      <link href="/2022/03/28/bao-jian-feng-cong-mo-li-chu-mei-hua-xiang-zi-ku-han-lai/"/>
      <url>/2022/03/28/bao-jian-feng-cong-mo-li-chu-mei-hua-xiang-zi-ku-han-lai/</url>
      
        <content type="html"><![CDATA[<p>此刻的我坐在电脑前，格外兴奋！因为我终于有一个自己的博客了！</p><p>之前一直依靠博客园写博客，但是问题很多也很麻烦。虽然说总体还不错，但是毕竟是商业的博客网站，还是有很多限制的。后来，<a href="https://www.cnblogs.com/SeaYJ/">我的博客园博客</a>中 JS 代码突然由于某种原因不能正常加载了。这样一来，更加坚定了我搭建一个自己的博客的欲望。</p><p>终于，在前辈们的帮助下我终于搭建了这个博客！非常感谢大家对我的帮助，也感谢 <a href="https://hexo.io/">HEXO</a> 提供的帮助！</p><p>谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> 成长之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开始 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
